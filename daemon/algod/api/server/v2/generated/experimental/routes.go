// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
