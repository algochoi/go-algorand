// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. WARNING: This endpoint is experimental and under active development. There are no guarantees in terms of functionality or future support.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
