// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
