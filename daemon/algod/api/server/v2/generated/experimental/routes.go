// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. WARNING: This endpoint is experimental and under active development. There are no guarantees in terms of functionality or future support.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"K1z3I8dsk5OPn6aToxXQHJ3W5o8CtGSp/6TWdLkEOXOP05ifrh8feVXi6KPzQHza9e0orPN89LHlqMn2",
	"9MQ6sEcffXmT3a1b9UOcgyroMBKLXc2O5pg1ObYpqKDx8FTwgqGOPqKKPPj7kUsli3/Eq4rdA0femxlv",
	"2aLSR70xuHZ6uCfdjz7if5AnA7Rs4GYfXZtidWRfgez/vOVp9Mc+oO5rBLGfjz62q2G2CKpWlc7EOuiL",
	"Sri9QfbHq+vDt/4+WlOmzbHqXNJYraTfWQPNj1yyRefXJr6x9wWDNoMf2093R349qotBRT92mT321S32",
	"QCOfKoc5k8Km49XS5yxrTGChtcyXlrK1Nk/eRx7BXLBlJTvv8HZe+CVMkf86//ENEZI4I8Fbml7VEVzk",
	"bGHLhEhxzTC5JQsyokzPmT8FfqtAbhsp7fSHsI6kfzrApQwValm24+vru8kHe3aD0t+KbLvj5a5NMmec",
	"ym379a5Gd7Ef+wP03xZcga2i5s0/ocEPr21ujUKtQssKbLkIpCkK+MfHx3+9MP3XC9OxZ+ymLVbw7P8X",
	"N/z13vjh740/PVDM7LTqt4L9R/HpIeB6E/2WZsQnmCfkNc2NvIaMnDrdveXNwbk++tPO9YxjXKG5LBB7",
	"Gfo0nXz1J168M65BcpoTbGln8+RPO5tzkNcsBXIBRSkklSzfkp94nRUeVILrC56f+BUXa+4JYe75VVGg",
	"MlIrbIpQdOWH+1nIyPamijDdWLTB5nBCN8d8Rv5x+u7N2ZuXJ9YYUN9bzf83JUhWANc0R39a5eIPNLsG",
	"ksE15KI0n7H8mQT053BBlhWVlGsAV5xPFmhz908S05zprUF6UeETUuaSIaSV1XSpMJgA3wuYTCchCkbm",
	"bRKjTC2BJ06dS+Yi2/q6nZKu9cYK1KPAwhNaTFCxrW0l7z8YzRDrazmdtzEAnBwdYWzTSih9NPk0/dgx",
	"DoQfP9So+8Irk1Kya8zj+vDp/wcAAP//Exxwl/i7AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
