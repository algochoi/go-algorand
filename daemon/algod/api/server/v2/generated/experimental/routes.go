// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAAA//8wqAqFoLcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
