// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Simulates a raw transaction or transaction group as it would be evaluated on the network.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8n8DAAD///yVhiZ0wgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
