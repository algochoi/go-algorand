// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. WARNING: This endpoint is experimental and under active development. There are no guarantees in terms of functionality or future support.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
