// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
