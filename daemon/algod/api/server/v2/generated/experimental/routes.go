// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Simulates a raw transaction or transaction group as it would be evaluated on the network.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9+3PcNtLgv4Ka76vy44aS/Eh2rarUd4qdZHWxsy5Lyd6t5UswZM8MVhyAC4DSTHz+",
	"36/QAEiQBDjUI/bu1f1ka4hHo9FoNPr5cZaLTSU4cK1mxx9nFZV0Axok/kXzXNRcZ6wwfxWgcskqzQSf",
	"HftvRGnJ+Go2nzHza0X1ejafcbqBto3pP59J+GfNJBSzYy1rmM9UvoYNNQPrXWVaNyNts5XI3BAndojT",
	"V7NPIx9oUUhQagjlX3m5I4znZV0A0ZJyRXPzSZFrptdEr5kirjNhnAgORCyJXncakyWDslAHfpH/rEHu",
	"glW6ydNL+tSCmElRwhDOl2KzYBw8VNAA1WwI0YIUsMRGa6qJmcHA6htqQRRQma/JUsg9oFogQniB15vZ",
	"8fuZAl6AxN3KgV3hf5cS4HfINJUr0LMP89jilhpkptkmsrRTh30Jqi61ItgW17hiV8CJ6XVA3tRKkwUQ",
	"ysm771+SZ8+evTAL2VCtoXBEllxVO3u4Jtt9djwrqAb/eUhrtFwJSXmRNe3fff8S5z9zC5zaiioF8cNy",
	"Yr6Q01epBfiOERJiXMMK96FD/aZH5FC0Py9gKSRM3BPb+F43JZz/i+5KTnW+rgTjOrIvBL8S+znKw4Lu",
	"YzysAaDTvjKYkmbQ90fZiw8fn8yfHH36j/cn2d/dn189+zRx+S+bcfdgINowr6UEnu+ylQSKp2VN+RAf",
	"7xw9qLWoy4Ks6RVuPt0gq3d9ielrWecVLWtDJyyX4qRcCUWoI6MClrQuNfETk5qXhk2Z0Ry1E6ZIJcUV",
	"K6CYG+57vWb5muRU2SGwHblmZWlosFZQpGgtvrqRw/QpRImB61b4wAX96yKjXdceTMAWuUGWl0JBpsWe",
	"68nfOJQXJLxQ2rtK3eyyIudrIDi5+WAvW8QdNzRdljuicV8LQhWhxF9Nc8KWZCdqco2bU7JL7O9WY7C2",
	"IQZpuDmde9Qc3hT6BsiIIG8hRAmUI/L8uRuijC/ZqpagyPUa9NrdeRJUJbgCIhb/gFybbf8fZ3/9iQhJ",
	"3oBSdAVvaX5JgOeiSO+xmzR2g/9DCbPhG7WqaH4Zv65LtmERkN/QLdvUG8LrzQKk2S9/P2hBJOha8hRA",
	"dsQ9dLah2+Gk57LmOW5uO21HUDOkxFRV0t0BOV2SDd1+czR34ChCy5JUwAvGV0RveVJIM3PvBy+ToubF",
	"BBlGmw0Lbk1VQc6WDArSjDICiZtmHzyM3wyeVrIKwPGDJMFpZtkDDodthGbM0TVfSEVXEJDMAfnZcS78",
	"qsUl8IbBkcUOP1USrpioVdMpASNOPS5ec6EhqyQsWYTGzhw6DPewbRx73TgBJxdcU8ahMJwXgRYaLCdK",
	"whRMOP6YGV7RC6rg6+epC7z9OnH3l6K/66M7Pmm3sVFmj2TkXjRf3YGNi02d/hMef+Hciq0y+/NgI9nq",
	"3FwlS1biNfMPs38eDbVCJtBBhL94FFtxqmsJxxf8sfmLZORMU15QWZhfNvanN3Wp2RlbmZ9K+9NrsWL5",
	"GVslkNnAGn1NYbeN/ceMF2fHeht9NLwW4rKuwgXlnVfpYkdOX6U22Y55U8I8aZ6y4avifOtfGjftobfN",
	"RiaATOKuoqbhJewkGGhpvsR/tkukJ7qUv5t/qqo0vXW1jKHW0LG7b1E34HQGJ1VVspwaJL5zn81XwwTA",
	"vhJo2+IQL9TjjwGIlRQVSM3soLSqslLktMyUphpH+k8Jy9nx7D8OW+XKoe2uDoPJX5teZ9jJyKNWxslo",
	"Vd1gjLdGrlEjzMIwaPyEbMKyPZSIGLebaEiJGRZcwhXl+qB9j3T4QXOA37uZWnxbUcbiu/e+SiKc2IYL",
	"UFa8tQ0fKBKgniBaCaIVpc1VKRbNDw9PqqrFIH4/qSqLDxQNgaHUBVumtHqEy6ftSQrnOX11QH4Ix0Y5",
	"W/ByZy4HK2qYu2Hpbi13izWKI7eGdsQHiuB2Cnlgtsajwcjw90Fx+GZYi9JIPXtpxTT+i2sbkpn5fVLn",
	"fw8SC3GbJi58RTnM2QcM/hK8XB72KGdIOE6Xc0BO+n1vRzZmlDjB3IpWRvfTjjuCxwaF15JWFkD3xd6l",
	"jOMLzDaysN6Rm05kdFGYgzMc0BpCdeuztvc8RCFBUujB8G0p8su/ULW+hzO/8GMNjx9OQ9ZAC5BkTdX6",
	"YBaTMsLj1Y425YiZhvh6J4tgqoNmife1vD1LK6imwdIcvHGxxKIe+yHTAxl5u/wV/0NLYj6bs21Yvx32",
	"gJwjA1P2ODsLQmGe8vaBYGcyDVDFIMjGvt6JeXXfCMqX7eTxfZq0R99ZhYHbIbcI3CGxvfdj8K3YxmD4",
	"VmwHR0BsQd0HfZhxUIzUsFET4HvlIBO4/w59VEq6GyIZx56CZLNAI7oqPA08vPHNLK3m9WQh5O24T4+t",
	"cNLqkwk1owbMd95DEjatq8yRYkQnZRv0BmpNeONMoz98DGMdLJxp+gdgQZlR7wML3YHuGwtiU7ES7oH0",
	"11Gmv6AKnj0lZ385+erJ01+ffvW1IclKipWkG7LYaVDkoXubEaV3JTwargxfR3Wp46N//dxrIbvjxsZR",
	"opY5bGg1HMpqN60IZJsR026ItS6acdUNgFMO5zkYTm7RTqzi3oD2iikjYW0W97IZKYQV7SwFcZAUsJeY",
	"brq8dppduES5k/V9PGVBSiEj+jU8YlrkosyuQComIqaSt64FcS28eFv1f7fQkmuqiJkbVb81R4EiQll6",
	"y6fzfTv0+Za3uBnl/Ha9kdW5eafsSxf5XpOoSAUy01tOCljUq85LaCnFhlBSYEe8o38AfbbjOWrV7oNI",
	"08+0DeOo4lc7ngdvNrNRJRSrzibc/W3Wx4rXz9mpHqgIOAYdr/EzPutfQanpvcsv/QlisL/0G2mBJYVp",
	"iK/g12y11oGA+VYKsbx/GGOzxADFD1Y8L02foZD+kyjALLZW93AZt4O1tG72NKRwuhC1JpRwUQBqVGoV",
	"v6YTZnm0B6IZU4c3v15biXsBhpByWpvV1hVBI92Ac7QdM5pb6s0QNSphxWjMT7aVnc6afEsJtDCveuBE",
	"LJypwBkxcJEULYzaX3ROSIicpQ5clRQ5KAVF5lQUe0Hz7SwT0SN4QsAR4GYWogRZUnlnYC+v9sJ5CbsM",
	"7eGKPPzxF/XoC8CrhablHsRimxh6mwefswcNoZ42/RjB9ScPyY5KIJ7nmtelYRAlaEih8EY4Se5fH6LB",
	"Lt4dLVcg0TLzh1K8n+RuBNSA+gfT+12hrauEl5d76JyzDertOOVCQS54oaKDlVTpbB9bNo06rzGzgoAT",
	"xjgxDpwQSl5Tpa01kfEClSD2OsF5rIBipkgDnBRIzci/eFl0OHZu7kGuatUIpqquKiE1FLE1cNiOzPUT",
	"bJu5xDIYu5F+tSC1gn0jp7AUjO+QZVdiEUR1o3R35vbh4lA1be75XRSVHSBaRIwBcuZbBdgNPV0SgDDV",
	"ItoSDlM9ymnca+YzpUVVGW6hs5o3/VJoOrOtT/TPbdshcVHd3tuFADO79jA5yK8tZq2P05qaJzSOTDb0",
	"0sge+CC2Zs8hzOYwZorxHLIxyjfH8sy0Co/AnkOa0EU4L8pgtt7h6NFvlOiSRLBnF1ILTihG3lKpWc4q",
	"lBR/hN29C879CaLqelKApsw81oMPVoiuwv7E2rH7Y95OkJ70hh2CP3jERpZTMoUXRhf4S9jhi+WtdZA6",
	"D9yq7uElEBnVnG7KCQLq3S6MABM2gS3Ndbkz15xew45cgwSi6sWGaW093roPBS2qLBwgqh8cmdEpw61z",
	"kd+BKdr5MxwqWN5wK+YzK1GNw3feE6s66HCSVCVEOeHtPUBGFIJJdlNSCbPrzDlYei88T0kdIJ0Qg5aQ",
	"hnk+UB004wrI/xI1ySlHgbXW0NwIQiKbxevXzGAusGZOZyFtMQQlbMDK4fjl8eP+wh8/dnvOFFnCtfdK",
	"Ng376Hj8GF/Bb4XSncN1D5oWc9xOI7wdFafmonAyXJ+n7LfQuZGn7OTb3uCNttWcKaUc4Zrl35kB9E7m",
	"dsraQxqZZp3EcSfpRIOhY+vGfT9jm7q8rw1fUlbWEtLGhYuL98vNxcUH8r1t6e2Cc0/kITquW6/ypbuN",
	"aomeCaRk5nkgBS1yqnRUNYqL5Kus8W1TUXA2yoDzN3cOKd/14qCmwkAWkNPaOnU6ru0gaL3r1EFEIurt",
	"bh+F0YVM1C7WpbaXdojVlRR1RVSz7ZYKNNXwx2jq2qFjUA4nDlwr2o8p7wojZZe7e7it7UBEQiVBIW8N",
	"X6fKfhXLMHzBMV+1Uxo2QwWe7fprQrx954XDwVtD8JJxyDaCwy4ascc4vMGPsd6Wvyc6402b6tsXnjvw",
	"98DqzjOFGu+KX9ztgKG9bdyK7mHz++P2dLdh4AbqJqCsCCV5yVBzIbjSss71Baf4NgoOW8T86l986dfy",
	"S98k/jyPvJ7dUBecoum9eTFF+eISInz5ewD/aFb1agVK96TEJcAFd60YJzVnGufamP3K7IZVINEGemBb",
	"buiOLGmJj/vfQQqyqHWXuaJ/udLm7W0VyWYaIpYXnGpSguGqbxg/3+Jw3hDjaYaDvhbyssHCQfQ8rICD",
	"YiqLm4l/sF/Rg8ctf+28eTDYz362qkczfuuEvtPQCWD73w//6/j9SfZ3mv1+lL34b4cfPj7/9Ojx4Men",
	"n7755v90f3r26ZtH//WfsZ3ysMe8nx3kp6/cm+L0FQqOre5xAPtn0zttGM+iRBZa2Hq0RR4a8dcT0KNW",
	"uet2/YLrLTeEdEVLVlB9O3Los7jBWbSno0c1nY3oqRH8Wm8ojt2By5AIk+mxxltf40PPinicASrDXegA",
	"npdlze1W1sop5NGN1lu4xXLexJLYGPJjgoEGa+rdM9yfT7/6ejZvAwSa77P5zH39EKFkVmxjYSAFbGNS",
	"tjsgeDAeKFLRnQId5x4Ie9SYb22K4bAbMM8ztWbV5+cUSrNFnMN550T3Wt/yU269Bs35QdX6zmnsxPLz",
	"w60lQAGVXsdiSzuSArZqdxOgZ+6spLgCPifsAA76r+ViBcq7FZRAlxjjiOphMcXZujkHltA8VQRYDxcy",
	"6Ukaox8Ubh23/jSfuctf3bs87gaOwdWfs9Gj+7+1IA9++O6cHDqGqR7YiCQ7dBBDEtFCOTfpjiHccDMb",
	"UW9Dsi74BX8FS8aZ+X58wQuq6eGCKparw1qB/JaWlOdwsBLk2Htev6KaXvCBpJVMehH4vJOqXpQsJ5eh",
	"RNySpw1kjj4babkS5uHYtwkO5Vc3VZS/2Amya6bXotaZi9TMJFxTWURAV02kHo5s46zHZp0TN7ZlxS4S",
	"1I0f53m0qlQ/Yme4/KoqzfIDMlQuHsVsGVFaSC+LGAHFQoP7+5NwF4Ok1z7Mt1agyG8bWr1nXH8g2UV9",
	"dPQMSCeE5Td35Rua3FXQ0VfeKqKor6vEhdt3DWy1pFlFVwmlgQZa4e6jvLzBR3ZZEuzWCZ3xroE4VLsA",
	"j4/0Blg4bhwGgIs7s718yo34EvATbiG2MeJGa3C67X4FwTS33q5eQM5gl2q9zszZjq5KGRL3O9NE4q+M",
	"kOWtgIqt0NPKJS1YAMnXkF9CgfHTsKn0bt7p7g3NTtD0rIMpm2fAusJjMCyqdhdA6qqgThTvKZQMhhVo",
	"7V293sEl7M5FG0t7kzDEblScSh1UpNRAujTEGh5bN0Z/8503A+q6qsoHl2GUgSeL44YufJ/0QbYi7z0c",
	"4hhRdKK2UoigMoIIS/wJFNxioWa8O5F+bHnmlbGwN18kLYHn/cQ1aR9PzvEgXA0Go9nvG8CkJeJakQU1",
	"crtw+TZs5FfAxWpFV5CQkEPt+sT4qo5GHgfZd+9Fbzqx7F9og/smCrJtnJk1RykFzBdDKviY6bmb+Jms",
	"AccqUAmm0XIIW5QoJjV+OZbpUNmxcti8QCnQ4gQMkrcChweji5FQsllT5VOBYMYUf5YnyQB/YCTjWPz6",
	"aeApEaRFaRTfnuf2z+ngdemi2H3ouo9XD5+WE2LPjYSPzpmx7RAcBaACSljZhdvGnlDaqMp2gwwcf10u",
	"S8aBZDGnC6qUyJnN5dJeM24OMPLxY0KsCphMHiFGxgHYaJjEgclPIjybfHUTILmLCqV+bDRpBn9D3IHd",
	"uiEakUdUhoUznnB49RyAOk+d5v7q+YvhMITxOTFs7oqWhs25F187yCCMGsXWXtC0M40/SomzIxp4e7Hc",
	"aE32KrrNakKZyQMdF+hGIF6IbWYjWKIS72K7MPQe9czEeJrYwbQB6w8UWYgtulvg1WI9AffAkobDgxG8",
	"8LdMIb1iv9RtboEZm3ZcmopRoUKSceq8hlxS4sSUqRMSTIpcHgYx6LcCoKfsaLM1usfv3kdqVzwZXubt",
	"rTZvc6t4p/fY8U8doeguJfA31MI0UeNOhfAOciGLtJ7CECrTTfrLoXrBJe80fGNyXPlIKs6T7mvDPyGG",
	"O5fwCujA084zgohXNmRjAMl320oY6daGdNj4focUKydKsJFqyuqsFOOr0gkGKTTFFux9kjzG7ZLbfD1+",
	"wGmyc2xzE4/8MViqKg7HTV4q7xx+RqBInPIWDpTD7wiJi/EfheVTmj7e9kX76EHputd0M0sEb63Y7WDI",
	"Z2jNHNpMFZSAr+es89rILmM27ouL9wpQNDvz3QItH+avoHz3KPDZkrBiSkNrbTISrMf059bjU0ybJcQy",
	"vTpdyaVZ3zshGnnO5mXBjp1lfvYVXAkN2ZJJpTM01UWXYBp9r1D79L1pGn9UdL3CbAZJVsQvUZz2EnZZ",
	"wco6Tq9u3h9fmWl/amQHVS9QMGGcAM3XZIEZT6O+oiNTW3fi0QW/tgt+Te9tvdNOg2lqJpaGXLpz/Juc",
	"i95NN8YOIgQYI47hriVROnKBBhGSQ+4YPDDs4cTr9GDMTDE4TIUfe69/lY/TTAlzdqSRtaBrUNI5N+KQ",
	"Y/3ILFNvk51HYxm50FlH+RFBV6PgUZpe2nic7gbzVaNTibtN2Xf1pKFd2z0D8unj8f3DOSE4K+EKyv1O",
	"0BQx7hU46BlhR0DXG4LhBN7HY79UP9yBFmHNSvswRqllIN2MGW7bp5FLP9a+rZFgDe5c4PBk652R0Dy9",
	"tfQ9NN1VVVZACdEwnb8FcTi0qjDY3jeOhayYwRgvYBsHx36ax1KSD5X3NePapq+8r8x4vXGmLzvMHzcF",
	"BZXNdHbz7HvpN2awSyGa04tKEGVjHBhlxDh487ILijn0qS9xjdOqYsW2Z/e0oya14/eCMbyg3GB7MBDQ",
	"RiwATILq5g1slXk2e3Unbc/BJMycd7P7hTJNOBVTvvbCEFFNgOg+XJ0DLX+E3S+mLS5n9mk+u5uZNIZr",
	"N+IeXL9ttjeKZ3TDs2azjtfDDVFOq0qKK1pmzpicIk0prhxpYnNve/7M0lqc651/d/L6rQP/03yWl0Bl",
	"1rx2kqvCdtW/zapsisLEAfG53ddUN/o5+xoONr/JqxYaoK/X4PJoBw/qQcLP1rkgOIrOIL2MewPvNS87",
	"Pwi7xBF/CKgad4jWVGe9IboeEPSKstLbyDy0Cc9dXNy0uzHKFcIB7uxJEd5F98puBqc7fjpa6trDk8K5",
	"RjJ9b2wye0UE77vLmVcwmt6QVDcU03VaC8iQOfF6g1aDTJUsj9tT+QJDbLj1kzGNCTZOvKfNiDVLuF3x",
	"mgVjmWZqglK7B2QwRxSZPvVrCncL4aoQ1Zz9swbCCuDafJJ4KnsHFfWnzrI+vE7jUqUb2Frj2+HvImOE",
	"qWr7N56TucYEjNArZwDuq0br5xfaWJ/MD4H7wQ2c+8IZB1fiiGOeow9HzTZQYd31rpksoe+tWOT1by5n",
	"bmKOaAUiprKlFL9DXFWFGr5IdKhPzsvQo/V34BNCylpLTltIqZ09ud0p6Sa0OHUdEhNUjzsfuOBgllBv",
	"jabcbrUtCNLxa48TTBhBcmjHbwnGwTyIuinp9YLGUqgaIcPAFJhfOnZzLYjv7HHvbDTM5Us+IIHfWNOW",
	"2bwJFcg2cHuYg+mWAoOddrKo0EoGSLWhTDC3vj6lEpFhan5Nua0rg9YIPEqut3nge4XQtZCY9UTFTfwF",
	"5GwTVS5dXLwv8qE5t2ArZquq1AqCsh1uIFuOylKRK31i3ela1JwuydE8KAzkdqNgV0yxRQnY4oltsaAK",
	"rFLFe274LmZ5wPVaYfOnE5qva15IKPRaWcQqQRqhDp83jaPKAvQ1ACdH2O7JC/IQXXQUu4JHBovufp4d",
	"P3mBBlb7x1HsAnDlk8a4SbEMg1zjdIw+SnYMw7jdqAdRbYCteZdmXCOnyXadcpawpeN1+8/ShnK6grhX",
	"6GYPTLYv7ibaAnp44YUt2KS0FDvCEuHGoKnhT4lIM8P+LBgkF5sN0xvnyKHExtBTW5PDTuqHs9WfXDpl",
	"D5f/iP5QlXcH6T0iP6/dx95vsVWj19pPdANdtM4JtaluStZ6Kvok7+TUZ9LC/NJNWmmLGzOXWTqKOei4",
	"uCSVZFzjw6LWy+zPJF9TSXPD/g5S4GaLr59Hcmp3c7vymwH+2fEuQYG8iqNeJsjeyxCuL3nIBc82hqMU",
	"j9rIzuBUJh234i46KT+h8aGnCmVmlCxJbnWH3GjAqe9EeHxkwDuSYrOeG9HjjVf22SmzlnHyoLXZoZ/f",
	"vXZSxkbIWHrM9rg7iUOClgyu0E8/vklmzDvuhSwn7cJdoP+yxlMvcgZimT/LyYfATSw+wdsAbT6hZ+Jt",
	"rD1dS09H5oqaffCFM80CYktG7rN73KWYTKfzTaDyHHoadAklQicAtoexm72A765iCEw+nR1K4ai7tBhl",
	"fisiS/YVCBobj4uYjOitUheI+WAY1MINNSfdbO+f36PGm0WGnh3mi4cV/+gD+4WZDSLZryCxiUEliuh2",
	"Fs33wLmMkm/Fduqm9ni339h/AdREUVKzsvilzQ3SK/QhKc/XUWeRhen4a1uSsFmcPczR/Khryrn1Rhjq",
	"JvCV8qt/zUTeW/8QU+fZMD6xbb/2iF1ub3Et4F0wPVB+QoNepkszQYjVbtqFJqyvXImC4DxtMs72Xh/W",
	"rAkqC/yzBqVj9yJ+sKEFqFFfGiq2Cf6BF6jHOCA/2JLiayCdXIGoP7BZmqDwadatqaeuSkGLOTHjnH93",
	"8prYWW0fW1jLJtZf2Wu3s4q0f+5NHG3HfGvvI6LPrFppTN2pNN1UsRQlpsW5b4B5UELrEj6sQ+wckFdW",
	"p6H8i9lOYuhhyeQGCtJM56RqpAnzH61pvkZlQYelpkl+ekUIT5UqqMLaVFNrku/iuTNwu6IQtibEnAgj",
	"OVwzZStJwxV0s6I0KYKcGOCzpHSXJ2vOLaVEpeKxFFa3QbsHznpBegNUFLIe4m8ovTg39RsWyDjDXtFs",
	"lv1qG4PyqzbHRlMl640voEu54CzHXJKxq9lVpZ5inZ2QdjMeGeD8bdQscriiNT6aYA2HxWTVD88IHeKG",
	"5qHgq9lUSx32T43lj9dUkxVo5TgbFHNfqsZpqBlX4JIpY4HygE8K2bF4I4eMOlG0cvINyQiDsxMqh+/N",
	"t5+cQgqjFi8Zx6enj5GwAZJWh4xFc7V5rzJNVgIjKNyhCNf03vQ5wGQtBWw/HPgiuziGNRibZVvviOFQ",
	"J95XwvkmmLYvTVubUK/9uRMHZyc9qSo3abqQUVQe0FueRHDE5t04egXIbcYPRxsht1EnJ7xPDaHBFbpI",
	"QEVcaEyiqE8vCMYIrZaisAWx/tHRPFpRN9HXjENbAjpyQeTRKwE3Bs9rop/KJdVWBJzE086BlugXEWNo",
	"Sjuj2F2H6m2w8yet8pmfI72NbT2iBONoGrSCG+W7pvK0oe5AmHiJJe8dIofVhVCqckKUC67p1huKMQ7D",
	"uH1Czu4FMDwGQ5nIdteS2pNzk5solapkURcr0Bktipg+4Vv8SvCrT1cKW8jrJot3VZEcM/N1UxUOqc1N",
	"lAuu6s3IXL7BHacLCnhFqCEsIuZ3GB2vFzv8N5bCOr0zzj3oxj723heoaMLnbiI3d0caSL2GpjPFVtl0",
	"TOCdcnd0tFPfjtDb/vdK6aVYdQH5zAnKxrhcuEcx/vaduTjC/F2DvOz2amnSa6E7qPBlV/HZ2CSG6XIl",
	"H3U6mDPIvDyugEgXaJzj5ZeIawl0vdTer9aunYpuyZPBWFS7/AmaklEWlIxJt35lNvocoYjr9FO+ZNaV",
	"zHwe9J4mGQ7kbBx7FKHeSXEI0I/eA5pUlDmnjZZZDDHrwr3S6sKxQ9ducH8RLogqqbH78SoV8OTjgG1k",
	"R6+k3SW4pEqVhCsmau8O4f3l/JPQ/upKigdxxcn1D/1mcKovqwZNKm3PXfkUu0z3Jv/xF+tdSYBrufsX",
	"UOEONn1QEDCWs7hTDtAJV1F9k556V75qagpeXmUbUYwFTP/4C3nlbUuT7h1PyLF0S6JwRbiiweKvXQkI",
	"38xIn5OnfeM6nVTV+NSJCPHh5LbhTadPpZoy53NM6/bWn19bRjFUIUTeKkE4M4etjhdMGkTDXgOBbQWY",
	"6zYIbE5nz5hKUC7IEV+rWQlUwQiGw6xtru1EJJ9vX5v204Lt44Us0yln2zSzyDwroVhbnCdW4XKiy/E5",
	"FqkMLIbDsby/3xXkWsiOH5MEuEkCXTNZUD35/6eeTShKGs9sT/8jaWbns5C3RAMV3fGibYoctKqhyTWS",
	"qt62iTB715mZQ1LD3A9hfljSUsVrlSWdXXuZTwKHlUii5/jCTosJ2b7dcuaBDwQrxhEZjwSwzt//byLT",
	"+rXfLzoHNbvGXxWDxAtB8hBbWungBg4kjRc1Soa4XyvgrrD2Moaa/VFRyyXkml3tSXTxtzXwIInC3GuC",
	"EZZlkPeCNVE2mFD05naOFqCxPBSj8ASJ/e8MTipG9BJ2DxTpUEO01tPcC/e3ySWJGMBbywgelVAxL0Vr",
	"unKOY0w1lIFY8F7Btju0WbmTRTYDOeeWc3mS7Eo8I1NeiZjue9JcpuuNMoFhwEgqF8awzF1a4/EKqwqq",
	"pgC2z0UZ6gXJaaQQlMtliWlJGmutz2oJyv/mcxDZWUp2CWEZULSNYwoF1yKq7PV65GxEThpEf0erV2Hu",
	"LD8za2M4hvG+kRzQ6P2UlwIrP6XCnbphE42b1wNlnUNRTMFKVAjXEqQrl4w3QykUZFp417oxOMZQYT1g",
	"b4UElay7YIFLZkN916Z7xfozNlkGdY6v4QKJhA010MkgKWt6zjFkv7TffYCrz8m1V6fd0Gu2N6uqj95h",
	"aoDEkOqXxN2W+wNnb6PeZpyDzLytu+9TyA0qQ/trJUVR5y4RTHAwGhPA5IRlI6wkqhnOh6scKPlKzAb+",
	"OkhDcAm7Q6t/ydeUr4L0aiH0VrS3awgyl/V2+141/3ElZ7myC1jdC5xfUns+n1VClFnC4Ho6TDTbPwOX",
	"LL80Ynbd+r0nCm2Sh2jnazxqrtc7n1i1qoBD8eiAkBNuI428c0230lFvcv5Aj82/xVmL2uZ+dor9gwse",
	"D9nApD7yjvzNDzPO1RQY5nfHqewge9KYbhNJbiW9jpSdHfrTTXZ36ZcCbYnKQhGTUm6ZqmvS+R4q9yOk",
	"H1RBHH/9hJn8Wi9maW1EKC21lSG7wsub1vQzrR6j77AHvFBZE1Rk9NzIgfOFXY3fNEgJlpKkhM7y9+l/",
	"3AJbvhRskcKoSbNMm4DYuql19yVQ7qmXjc4sjuehag3T9gmOOX+HKjmFNkObhjUgHHMu5RUtP79aDfM5",
	"niA+XHH5+ELD92+IZItKdTt/v9d00tzBW/f+puZvUQ34NzB7FDX2uqGc8aephOlNZJjinpakFG1dZByS",
	"XOOY1jr85GuycFF0lYScKdYLML72VU2a5x4W+XI+llu95325b52/CH0HMnYPBFGRn9oKCVrg/dBC2B7R",
	"L8xUEic3SuUx6huQRQR/MR4VprPZc11cdszGtuJMzx9SSLhn83HgCHZD8/EwUc/U5VkTqbl0agXDdU6+",
	"rTu4jVzU7dqm+j4MkTuWRn+Ky0K8Oobpjj4TFiFYWoYgqOS3J78RCUusHSnI48c4wePHc9f0t6fdz+Y4",
	"P34cFeM+m7eExZEbw80bpRhnTBuEwsC2YjKR9O+dY+7uwkbzHcEOEM/OWUK0GgxO7f1GP3MqaJS59yr4",
	"7dJc4338LECZX3IzUQz3v6RiF6x/fiJMpncWalYW+w5lJ+iprXyLYT2/uoDcL1J791eryx6ySVf/8CY+",
	"cv0DgIiJrLUzeTBVEM40IZLJdYvELSFx5bVkeod5wrzqk/0a9an5obGWOCtwk1nGyR1aXEKTaa61rdTK",
	"SzY/CFqiLGDeM+ihqIUoD8h3W7qpSnBM6psHiz/Bsz8/L46ePfnT4s9HXx3l8PyrF0dH9MVz+uTFsyfw",
	"9M9fPT+CJ8uvXyyeFk+fP108f/r8669e5M+eP1k8//rFnx6YO8CAbAGd+awUs/+JBaqzk7en2bkBtsUJ",
	"rdiPsLO1MA0Z+yqbNEcuCBvKytmx/+m/e+52kItNO7z/deaC3mdrrSt1fHh4fX19EHY5XKEyNdOizteH",
	"fp5BGc6Tt6dNeJj1hcIdtZE/hhRwUx0pnOC3d9+dnZOTt6cHLcHMjmdHB0cHTzCXcQWcVmx2PHuGP+Hp",
	"WeO+H/okwscfP81nh2ugJdrEzR8b0JLl/pO6pqsVyANXbtT8dPX00Itxhx+dIvnT2LfDsHLP4ceOvr3Y",
	"0xMdXQ4/+iRW4607WaKcnSHoMBGKsWaHC4xAntoUVNA4vRR83KnDj/g8Sf5+6MIy4x/xmWjPwKE3SsVb",
	"drD0UW8NrL0eOdX5uq4OP+J/kCYDsKwT9BBc6wZ2aOv6D3/e8Tz643Cgfn252M+HH7tp2zsIVetaF+I6",
	"6IsPIPt6H87XVPzq/H14TZk2Io2zLGJOqmFnDbQ8dIFLvV9bX+HBF3SADn4M9iT+62ETjx/92Cf22Fe3",
	"2YlGPuwUhS5hQ1sb7nNaoFrOtggVc/Z6A6W/FcVupFzxNlswTuWuW7K4vd7tx6EsMyyovgabTtJrp0Kd",
	"Lb4q3TLCi1fLGmzeHLQsIA98enQ0Au9GrSoXJpMqlb6krKwlZJuUSuni4v0S0z99b1t6pcM8ajTDJzzW",
	"ADMDt1EVlJTsCshCClrkVCUSUTGFdqymal78JbJRYUqwXplSNR0GsoCcmieZXsPOWhsdBG3dPjUhSWEf",
	"hdGFTCmu7WKF0B8uxCrWK/A04cvmP7/5zo+qgjse/xHgvqUF8WHhGXlDS0P2UGCBBYnO0N3AzudHTz4r",
	"fKccnUeMKEGsqPRpPvvqMyPplBvBnpYEW1oInn1WCM5AXrEcyDlsKiGpZOWO/MybOOcg697wbP3ML7m4",
	"5h54I23Xmw3yu4ZtKkLRLhLSp5ARcqWKMN3q9MBGJUI/ahrPF10ptIdgUZfZ3Lz2QLINcJfcZ5sZLrkC",
	"njk+nS1EsfOZSSW91lt7LA+D1034Wpgdvw/eCe8/fPpgvknTGj+1wu/x4SGaZ9dC6cPZp/nHnmAcfvzQ",
	"gO4TeMwqya4wHujDp/8bAAD//22YWqyCwQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
