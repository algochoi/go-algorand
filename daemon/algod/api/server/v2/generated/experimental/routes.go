// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. WARNING: This endpoint is experimental and under active development. There are no guarantees in terms of functionality or future support.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
