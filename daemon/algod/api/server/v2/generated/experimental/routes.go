// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. WARNING: This endpoint is experimental and under active development. There are no guarantees in terms of functionality or future support.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
