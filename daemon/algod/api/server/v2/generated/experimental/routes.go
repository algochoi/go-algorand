// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. WARNING: This endpoint is experimental and under active development. There are no guarantees in terms of functionality or future support.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
