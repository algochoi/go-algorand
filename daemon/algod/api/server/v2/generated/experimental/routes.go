// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. WARNING: This endpoint is experimental and under active development. There are no guarantees in terms of functionality or future support.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
