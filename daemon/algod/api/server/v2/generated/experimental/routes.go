// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. WARNING: This endpoint is experimental and under active development. There are no guarantees in terms of functionality or future support.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"H2vUfQmWSSnZJWZ0ffz8/wMAAP//yfeZJga8AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
