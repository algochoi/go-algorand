// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Simulates a raw transaction or transaction group as it would be evaluated on the network.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ht1n8KjXcPvx9v8GAAD//+WgtTWDwQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
