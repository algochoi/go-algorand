// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. WARNING: This endpoint is experimental and under active development. There are no guarantees in terms of functionality or future support.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
