// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
