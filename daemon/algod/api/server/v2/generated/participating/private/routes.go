// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"zzUJfKnvCksK15+v/18AAAD//w7iPph11gAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
