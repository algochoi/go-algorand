// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"rnCkcP3x+v8FAAD//z3oiHHSywAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
