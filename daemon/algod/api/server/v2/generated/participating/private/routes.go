// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"13eFI4WrT1f/LwAA//+oYJpqgsYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
