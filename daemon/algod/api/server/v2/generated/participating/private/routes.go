// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8LW6KxwpXH+5/r8BAAD//7rf7Mga0gAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
