// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+H8BAAD///cF/Uzx4wAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
