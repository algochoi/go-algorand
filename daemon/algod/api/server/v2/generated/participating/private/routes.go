// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
