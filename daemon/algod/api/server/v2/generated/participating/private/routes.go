// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Xl99vvr/AQAA//8sBWVwyLkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
