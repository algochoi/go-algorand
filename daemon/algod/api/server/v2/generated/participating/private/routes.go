// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
