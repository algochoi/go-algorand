// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
