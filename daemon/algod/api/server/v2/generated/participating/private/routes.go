// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"eN/cFZ4UPrz78P8CAAD//2B/QgwP5AAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
