// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8OOnmgQ+13eFI4WrT1f/LwAA//+GlMmsTMcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
