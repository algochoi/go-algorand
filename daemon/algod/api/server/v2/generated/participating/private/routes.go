// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
