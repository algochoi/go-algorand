// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"GdgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
