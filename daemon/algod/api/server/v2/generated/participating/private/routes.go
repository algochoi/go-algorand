// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
