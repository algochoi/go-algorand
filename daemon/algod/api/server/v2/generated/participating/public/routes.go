// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
