// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+xpnX6p+Ukp2hZXv3n/8fwEAAP//m92Q/tvVAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
