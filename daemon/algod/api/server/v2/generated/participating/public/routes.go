// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
