// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vKzvP/6/AAAA//97MZgML+YAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
