// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"qNQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
