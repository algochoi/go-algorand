// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"SSnZJVb++fDp/wcAAP//u/+78NnHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
