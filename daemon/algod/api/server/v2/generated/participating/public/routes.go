// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
