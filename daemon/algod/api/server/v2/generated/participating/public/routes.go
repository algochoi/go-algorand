// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. WARNING: This endpoint is experimental and under active development. There are no guarantees in terms of functionality or future support.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
