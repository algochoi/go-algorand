// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
