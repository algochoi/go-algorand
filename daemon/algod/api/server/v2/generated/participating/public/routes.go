// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
