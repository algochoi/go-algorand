// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"szrbUZbaAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
