// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
