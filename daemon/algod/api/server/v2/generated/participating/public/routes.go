// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
