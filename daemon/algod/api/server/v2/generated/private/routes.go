// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
