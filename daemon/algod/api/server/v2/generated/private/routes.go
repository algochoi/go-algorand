// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
