// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

<<<<<<< HEAD
	"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",
=======
	"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",
>>>>>>> teal4-bench
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
