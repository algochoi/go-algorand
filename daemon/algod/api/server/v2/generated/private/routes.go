// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9+3PcNtLgv4Ka/aoc+4YayY/sWlWp7xTLcXRxHJelZO8+y5dgyJ4ZrEiAAUBpJj79",
	"71doACRIgjPUY5VLnX+yNcSj0Wg0+o3Pk1QUpeDAtZocfp6UVNICNEj8i6apqLhOWGb+ykClkpWaCT45",
	"9N+I0pLx5WQ6YebXkurVZDrhtICmjek/nUj4vWISssmhlhVMJypdQUHNwHpTmtb1SOtkKRI3xJEd4uR4",
	"cr3lA80yCUr1ofyJ5xvCeJpXGRAtKVc0NZ8UuWJ6RfSKKeI6E8aJ4EDEguhVqzFZMMgztecX+XsFchOs",
	"0k0+vKTrBsREihz6cL4SxZxx8FBBDVS9IUQLksECG62oJmYGA6tvqAVRQGW6Igshd4BqgQjhBV4Vk8OP",
	"EwU8A4m7lQK7xP8uJMAfkGgql6Ann6axxS00yESzIrK0E4d9CarKtSLYFte4ZJfAiem1R36slCZzIJST",
	"D9+9Is+ePXtpFlJQrSFzRDa4qmb2cE22++RwklEN/nOf1mi+FJLyLKnbf/juFc5/6hY4thVVCuKH5ch8",
	"ISfHQwvwHSMkxLiGJe5Di/pNj8ihaH6ew0JIGLkntvG9bko4/5+6KynV6aoUjOvIvhD8SuznKA8Lum/j",
	"YTUArfalwZQ0g37cT15++nwwPdi//tvHo+S/3J8vnl2PXP6retwdGIg2TCspgaebZCmB4mlZUd7HxwdH",
	"D2olqjwjK3qJm08LZPWuLzF9Leu8pHll6ISlUhzlS6EIdWSUwYJWuSZ+YlLx3LApM5qjdsIUKaW4ZBlk",
	"U8N9r1YsXZGUKjsEtiNXLM8NDVYKsiFai69uy2G6DlFi4LoVPnBB/+8io1nXDkzAGrlBkuZCQaLFjuvJ",
	"3ziUZyS8UJq7St3ssiJnKyA4uflgL1vEHTc0necbonFfM0IVocRfTVPCFmQjKnKFm5OzC+zvVmOwVhCD",
	"NNyc1j1qDu8Q+nrIiCBvLkQOlCPy/Lnro4wv2LKSoMjVCvTK3XkSVCm4AiLm/4JUm23/H6c/vSNCkh9B",
	"KbqE9zS9IMBTkQ3vsZs0doP/Swmz4YValjS9iF/XOStYBOQf6ZoVVUF4VcxBmv3y94MWRIKuJB8CyI64",
	"g84Kuu5PeiYrnuLmNtO2BDVDSkyVOd3skZMFKej6m/2pA0cRmuekBJ4xviR6zQeFNDP3bvASKSqejZBh",
	"tNmw4NZUJaRswSAj9ShbIHHT7IKH8ZvB00hWATh+kEFw6ll2gMNhHaEZc3TNF1LSJQQks0d+dpwLv2px",
	"AbxmcGS+wU+lhEsmKlV3GoARp94uXnOhISklLFiExk4dOgz3sG0cey2cgJMKrinjkBnOi0ALDZYTDcIU",
	"TLhdmelf0XOq4OvnQxd483Xk7i9Ed9e37vio3cZGiT2SkXvRfHUHNi42tfqPUP7CuRVbJvbn3kay5Zm5",
	"ShYsx2vmX2b/PBoqhUyghQh/8Si25FRXEg7P+RPzF0nIqaY8ozIzvxT2px+rXLNTtjQ/5fant2LJ0lO2",
	"HEBmDWtUm8Juhf3HjBdnx3odVRreCnFRleGC0pZWOt+Qk+OhTbZj3pQwj2pVNtQqztZe07hpD72uN3IA",
	"yEHcldQ0vICNBAMtTRf4z3qB9EQX8g/zT1nmprcuFzHUGjp29y3aBpzN4Kgsc5ZSg8QP7rP5apgAWC2B",
	"Ni1meKEefg5ALKUoQWpmB6VlmeQipXmiNNU40n9IWEwOJ3+bNcaVme2uZsHkb02vU+xk5FEr4yS0LG8w",
	"xnsj16gtzMIwaPyEbMKyPZSIGLebaEiJGRacwyXleq/RR1r8oD7AH91MDb6tKGPx3dGvBhFObMM5KCve",
	"2oaPFAlQTxCtBNGK0uYyF/P6h6+OyrLBIH4/KkuLDxQNgaHUBWumtHqMy6fNSQrnOTneI2/CsVHOFjzf",
	"mMvBihrmbli4W8vdYrXhyK2hGfGRIridQu6ZrfFoMDL8fVAc6gwrkRupZyetmMbfu7YhmZnfR3X+a5BY",
	"iNth4kItymHOKjD4S6C5fNWhnD7hOFvOHjnq9r0d2ZhR4gRzK1rZup923C14rFF4JWlpAXRf7F3KOGpg",
	"tpGF9Y7cdCSji8IcnOGA1hCqW5+1nechCgmSQgeGb3ORXtzDeZ+bcfrHDocnK6AZSJJRTYNz5c5L/M7G",
	"jt9jP+QIICOC/U/4H5oT89kQvuGLdlijsDOkXxGY1zOj51rp2c5kGqD+LUhhVVtiVNIbQfmqmbzHIyxa",
	"xvCI11abJtjDL8IsvbGVHc2FvB29dAiBk8YCSKgZNTgu087OYtOqTBx+IlYE26AzUON06QuTIYa6w8dw",
	"1cLCqab/BiwoM+p9YKE90H1jQRQly+EezuuKqlV/EUate/aUnH5/9OLg6a9PX3xt9JJSiqWkBZlvNCjy",
	"lZOmidKbHB73V4bybJXr+OhfP/d2o/a4sXGUqGQKBS37Q1l7lL20bDNi2vWx1kYzrroGcMyxPAPDXiza",
	"iTW1GtCOmTJ3YjG/l80YQljWzJIRB0kGO4nppstrptmES5QbWd2H8gFSChmxiOAR0yIVeXIJUjERMW6/",
	"dy2Ia+EFkrL7u4WWXFFFzNxorKt4BnIvRll6zRE0pqFQuy5UO/TZmje4cQNSKemmh3673sjq3Lxj9qWN",
	"fG/7UaQEmeg1JxnMq2VLdl1IURBKMuyIF8dbtlzp4B59L4VY3Lu4EZ0ltiT8gAZ2kps+7qazsgEC/E5k",
	"YBSlSt0De28Ga7BnKCfEGZ2LShNKuMgAtapKxRn/gGsOfQLoytDhXaJXVrCYg5HgU1qZ1VYlQUN9jxab",
	"jglNLRUliBo1YMmsTdC2lZ3Oun1yCTQzkj1wIubOXOgMmbhIil4G7Vmnu3Yiuk4LrlKKFJQyGpmVs3eC",
	"5ttZstRb8ISAI8D1LEQJsqDylsBqoWm+A1BsEwO3lhOdjbUP9bjpt21gd/JwG6k0SpmlAiOUmgOXg4Yh",
	"FI7EySVItDX+W/fPT3Lb7avKgUgAJ1qdsQJ1O065UJAKnqnoYDlVOtl1bE2jlvxnVhCclNhJxYEH7Atv",
	"qdLW4sx4hrqAZTc4jzU8mCmGAR68As3Iv/jbrz92avgkV5Wqr0JVlaWQGrLYGjist8z1Dtb1XGIRjF3f",
	"t1qQSsGukYewFIzvkGVXYhFEdW2YcS6Z/uLQfGHugU0UlS0gGkRsA+TUtwqwG3pDBwAximPdEwmHqQ7l",
	"1C7Y6URpUZbm/Omk4nW/ITSd2tZH+uembZ+4qG74eibAzK49TA7yK4tZ6wdfUSO048ikoBfmbkIR3JrG",
	"+zCbw5goxlNItlG+OZanplV4BHYc0gHtx0XaBLN1DkeHfqNEN0gEO3ZhaMEDqth7KjVLWYmSxA+wuXfB",
	"qjtB1KRDMtCUGfUg+GCFrDLsT6yvozvm7QStUVJzH/ye2BxZTs4UXhht4C9gg7bd99aJfha43u9BUoyM",
	"ak435QQB9a45cyGHTWBNU51vzDWnV7AhVyCBqGpeMK1tVERbkNSiTMIBohaJLTM6m5B1QPsdGGOkOsWh",
	"guX1t2I6sWLLdvjOOoJLCx1OYCqFyEfYznvIiEIwyrZOSmF2nbkgHB+p4SmpBaQTYtAgWDPPR6qFZlwB",
	"+V+iIinlKIBVGuobQUhks3j9mhnMBVbP6azoDYYghwKsXIlfnjzpLvzJE7fnTJEFXPnINdOwi44nT1BL",
	"ei+Ubh2ue1DRzXE7ifB2NNWYi8LJcF2esrfTFuFGHrOT7zuD1/Ydc6aUcoRrln9nBtA5mesxaw9pZEXV",
	"avfacdxRVphg6Ni6cd9PWVHl97Xhes2TpRRVGWNDLlrBh38thCRAjVgWgImdrRByZeQKC5yLBhtzPzTL",
	"CVb/xow6ZGaZTgbl1vPzj5fn558wSO+ykV9RJutEs+1F5UYMz0tUlaYQExfPzz8qM/5JVEKsF9+J3m/i",
	"Md3A5pqupHXrEZrqiuatXZ7GgvfaFFVvW4ONLvRjKO6D22EjKPS3VdV7YylPUw3/HutRM3QMyv7Egcuv",
	"+Tjk9TOSfb65BwnBDkQklBIU8vNQI1b2q1iEYbWO4auN0lD0jUq2668DIvUHL5D26FTwnHFICsFhE80k",
	"YRx+xI+x3vZOGeiMt/tQ367A3oK/A1Z7njHUeFf84m4HbOR97e6+h83vjtuxJ4YBxWgPgbwklKQ5Q2uJ",
	"4ErLKtXnnKI+Fhy2iJPJa5nDGvor3yRuEoho7G6oc06VwWGtpUUN4wuI2F++A/CKuqqWS1AdVkcWAOfc",
	"tWKcVJxpnKsw+5XYDStBoqdnz7Ys6IYsaI4GhT9ACjKvdJt9Ytyj0kbft8ZNMw0Ri3NONcmBKk1+ZPxs",
	"jcP58EJPMxz0lZAXNRbiXH8JHBRTSdwZ9sZ+/Z6qlV++aeivZ9fZmu/M+E1w5EZDK7Hif3/1n4cfj5L/",
	"oskf+8nL/zb79Pn59eMnvR+fXn/zzf9p//Ts+pvH//kfsZ3ysMei8hzkJ8dOjzk5RmG1MWv2YH8wW1fB",
	"eBIlMnN1F4xjcHeHtshXRuT2BPS4MZC6XT/nes0NIV3SnGVU344cuiyudxbt6ehQTWsjOqYLv9ZPsWCC",
	"pUhKml6gL3myZHpVzfdSUcy8/jZbilqXm2UUCsHxWzajJZupEtLZ5cEOYfIO/IpE2FWHyd5aIOh7ouOR",
	"tGgsd8GxePIWFbdEUSlnHsdAMe8RFItpHS1tsyQPCYbSrqh3Z7s/n774ejJtQmDr75PpxH39FDkTLFvH",
	"Ap0zWMd0BHfU8Ig9UqSkGwUD0ifCHnV+Wo9ZOGwBRrlUK1Y+PM9Rms3jvPJ7xxidrWHNT7gN/TEnER0D",
	"G2dvFIuHh1tLI3yXehXLnmrJHNiq2U2AjjOvlOIS+JSwPdjr6vrZEpR3w+ZAF5jFg8ZtMSacsD4HltA8",
	"VQRYDxcySqGO0Q+KyY7vX08nToxQ9y7Zu4FjcHXnrL0A/m8tyKM3r8/IzLFe9cjG3NuhgyjpiPLqAgFb",
	"bl7DzWzOqE06OOfn/BgWjDPz/fCcZ1TT2ZwqlqpZpUB+S3PKU9hbCnLoYwuPqabnvCezDaZ1B1GdpKzm",
	"OUvJRShbN+RpU/WiWqfh+Ebx7PoM+5KwmyrKX+wEyRXTK1HpxOUiJRKuqMwioKs6FwVHtpmE22adEje2",
	"ZcUu18mNH+d5tCxVNya9v/yyzM3yAzJULuLabBlRWkgv1RhRx0KD+/tOuItB0itvyagUKPJbQcuPjOtP",
	"JDmv9vefAWkFaf/mhAdDk5sSRtszBmPmu0YMXLjVkGCtJU1KugQVXb4GWuLuo+RdoLqe5wS7tYLDfSgV",
	"DtUswONjeAMsHDcOdMXFndpePqk8vgT8hFuIbYy40bjLbrtfQbj4rberE3Le26VKrxJztuPGIEPifmfq",
	"XNOlEbK8D1OxJTeHwKXlzoGkK0gvIMMMQShKvZm2uns3uRNZPetgymbS2nhWTPdCw/QcSFVm1An1lG+6",
	"eTcKtPbJRh/gAjZnoskWu0miTTvvQw0dVKTUQLo0xBoeWzdGd/NdyAUaxcrSp09gqLAni8OaLnyf4YNs",
	"Rd57OMQxomjlJQwhgsoIIizxD6DgFgs1492J9GPLM/rK3N58kcRbz/uJa9KoYS5sIlwNplvY7wVgWr64",
	"UmROjdwuXEa5zW0IuFil6BIGJOTQNzAyg6DlT8BBdt170ZtOLLoXWu++iYJsGydmzVFKAfPFkAoqM51g",
	"GT+TdT9ZUyzBQjEOYfMcxaQ6TscyHSpbPhpb+WIItDgBg+SNwOHBaGMklGxWVPlkd6wJ4M/yKBng35ir",
	"sy1DM7TiB4n/df6l57ndc9rTLl2epk/O9BmZoWo5IrvSSPgYehjbDsFRAMogh6VduG3sCaXJG2o2yMDx",
	"02KRMw4kiYWMUKVEymy1guaacXOAkY+fEGKNyWT0CDEyDsBGtyoOTN6J8Gzy5U2A5C7vifqx0SEb/A3x",
	"gF8bFGhEHlEaFs74QDin5wDUxRnV91cn2g2HIYxPiWFzlzQ3bM5pfM0gvURBFFs7aYHOsf94SJzdYsu3",
	"F8uN1mSvotusJpSZPNBxgW4LxNtFidgWKMSXs2XVuBq6S8dMPXB9D+HqqyDF8FYAdDT9phiX0/x2amjt",
	"u7l/kzUsfdqkzvt45hjtD9FPdJcG8Nc3QdRJge+713VUSW87/Nv5kIH8FGPF5oz0fR19j4qCHFAiTloS",
	"RHIR84AZwR6Q3Z76boHmjlmXlG8eB1EkEpZMaWhs0eZW8s6Vh7bNUSz2IMRieHW6lAuzvg9C1DzaZhNj",
	"x9YyH3wFl0JDsmBS6QQN+XE3v9DwnUKN8jvTNC4otONUbN0jlsV5A057AZskY3mlB8MLhIYfjs2072oj",
	"jKrmF7BBcRDjI+ZYpysavbZlahvguHXBb+2C39J7W++402CamomlIZf2HH+Rc9HhvNvYQYQAY8TR37VB",
	"lG5hkHjxH0OuY4mJgdBgD2dmGu5tMz32DlPmx94ZfWGhGL6j7EjRtQTa8tZVMPSRGHWP6aDMVT/ZZuAM",
	"0LJk2bpjCLSjDqqL9Ebavq8f0MEC7q4bbAcGAqNfLJ5bgmqXimikW1uwjIdr2xuFmbN2QYeQIYRTMeXL",
	"bfYRZUgba8LtwtUZ0PwH2Pxi2uJyJtfTyd3shjFcuxF34Pp9vb1RPKOH29qRWm6AG6KclqUUlzRPnHV1",
	"iDSluHSkic29MfaBWV3chnf2+ujtewf+9XSS5kBlUosKg6vCduVfZlW2KsXAAfHl/IzC42V2K0oGm19X",
	"CwgtslcrcKXTAmm0V+OlsbYHR9FZaBfxQJud9lbnGLBL3OIggLL2DzS2K+seaLsE6CVluTcaeWgHgmJw",
	"ceMKBUW5QjjAnV0LgYcouVd20zvd8dPRUNcOnhTOtaW4W2HrFyoieNd/jCG2m9K5nAuKFVqsSaDPnHhV",
	"JOb4JSpnadzAyOcYs8qt48g0Jth4QBg1I1ZswA/JKxaMZZqpEYpuB8hgjigyfbWfIdzNhSs8XXH2ewWE",
	"ZcC1+STxVHYOKpbEcabm/nVqZIf+XG5ga55uhr+LjBFWJ+reeAjEdgEjdFP1wD2uVWa/0NocgwHGjT3+",
	"Bt7ucMbelbjFU+3ow1GzjQFctd1NYZ3oPv8zhGFrCu4uUu2VV1cmaWCOaNFpppKFFH9AXM9D9TiS7OHr",
	"MTEM8fgDxkRrN9adpnZ2M/vgdg9JN6EVqu2hH6B63PnAJ4W1b7x5lnK71bYGbCvQK04wYXDmzI7fEIyD",
	"uRfQmtOrOY0VBjJChoHpqPF+tgzJWhDf2eNe1SH9dnYSOFLrtsymQZYgmzysfsr9LQUGO+1oUaGRDJBq",
	"Q5lgap1fuRKRYSp+RbktJWz62aPkeiuwxi/T60pITGJWcZt3BikraB6XHLLU50s0ZzZjS2YL6VYKgkqt",
	"biBbgdxSkat2a/3LDWpOFmR/GtSCdruRsUum2DwHbHFgW8ypQk5eG6LqLmZ5wPVKYfOnI5qvKp5JyPRK",
	"WcQqQWqhDtWb2nMzB30FwMk+tjt4Sb5Cn5Vil/DYYNHdz5PDg5dodLV/7McuAFcxexs3yZCd/NOxkzgd",
	"o9POjmEYtxt1L5qSa585GGZcW06T7TrmLGFLx+t2n6WCcrqEeJhEsQMm2xd3Ew1pHbzwzNboVlqKDWE6",
	"Pj9oavjTQBC3YX8WDJKKomC6cJ4NJQpDT00ZVjupH84W/HZFwjxc/iM6CEvvH+kokQ9rNLX3W2zV6MZ9",
	"Rwtoo3VKqM1cz1njuvd1/ciJr3+BVdPqYmkWN2Yus3QUc9CTvyClZFyjYlHpRfIPkq6opKlhf3tD4Cbz",
	"r59HKsW1i0PxmwH+4HiXoEBexlEvB8jeyxCuL/mKC54UhqNkj5ukieBUDnoy49FinqN3gwW3Dz1WKDOj",
	"JIPkVrXIjQac+k6Ex7cMeEdSrNdzI3q88coenDIrGScPWpkd+vnDWydlFELGqiE1x91JHBK0ZHCJgWvx",
	"TTJj3nEvZD5qF+4C/Z/refAiZyCW+bMcUwS+rVie/dIkgXWKbUrK01XU7j83HX9taqLXS7bnOFp8Z0U5",
	"hzw6nL0zf/V3a+T2/5cYO0/B+Mi23SKadrmdxTWAt8H0QPkJDXqZzs0EIVbbWTF11GW+FBnBeZpKLw2V",
	"9euCBoXyfq9A6ViGAX6wkR9o3zF6ga3TRoBnKFXvkTf2TaMVkFYhCpRm6/ziHLIlSGd4rMpc0GxKzDhn",
	"r4/eEjur7WMr+9o6cUsU5tqr6Oj1QVmocTGEvkhvPL55/DjbAy7NqpXGujBK06KM5aKZFme+ASa8hbZO",
	"FPNC7OyRYythKy+/2UkMPSyYLIxkWo9meTzShPmP1jRdoeja4ibDJD++wKGnShU8A1GXc64rO+G5M3C7",
	"Goe2xOGUCKNfXDFln7KBS2inv9W5oE518ulw7eXJinNLKVEevS1X+TZo98BZh7Y3h0Yh6yD+hoKLrQ96",
	"03qPp9grWiqlWzyy9/6DTYGqKxH7J8pSygVnKRYqCR7PqUF2z+KM8RWMqOnSNUb5I+5OaORwRUtW1uFE",
	"DouDRSw9I3SI6xsrg69mUy112D81vr+yoposQSvH2SCb+sqrzl7CuAJXqQtfSAr4pJAt/wtyyKhLL6lN",
	"vzckI4ydHxCAvzPf3jn1CINKLxhHQcihzcWvWosGvtqhjfTENFkKUG497QRC9dH02cNcugzWn/b8Kx84",
	"hnVfmGVbX11/qCPvuXOeMtP2lWlrKyc0P7fCFO2kR2XpJh2uyxuVB/SaDyI44oFJvAk8QG49fjjaFnLb",
	"6nLH+9QQGlyiww5KvId7hFHXqO0U5b6keWUpClsQG+oSTZhmPALGW8aheYMmckGk0SsBNwbP60A/lUqq",
	"rQg4iqedAc3RSxdjaEo7E+1dh+psMKIE1+jnGN7GprzuAOOoGzSCG+Wb+ukbQ92BMPEK39xyiOwXy0Wp",
	"yglRGYYdd8rnxhiHYdy+QHf7Augfg75MZLtrSe3JuclNNJRJNq+yJeiEZlmsZs23+JXgV192BtaQVnWJ",
	"uLIkKZZgaNek6FObmygVXFXFlrl8gztOl4qYHP0OJ1A+rroZfI8g+zWs9/j1+w+vXx2dvT6294VRy5si",
	"RhIKwxCNHqs0GNG5UkB+C9H4G/b7rbPgOJhB2ewI0Yaluz0hYkD9fIP/xsq4DROQ86nfOKrLO9Cx443F",
	"+/ZIPeHcHL1EsWUyHhN49d0dHc3UtzuPTf97PZC5WLYBeeA0923MONyjGBt+be63MAu8V5vQ3oB1kjbG",
	"UAn/Agdqt3V6YZt54o3bK1aItvv6MYXt1pPhZxGmeEcPRFIGyf3UigHWGTQUT5kOhv9S7bJwNCVbOSW+",
	"ZRAbwQZj2DcU7CusUUPYUACGjb8wn3u9xwmwPXUAx96KUB/Z0wfoBx82SErKnKezYRZ9zLoA437I95jQ",
	"w2aDu4twYbs4SGwl8dr0w3U2mtoaeA2UQrGmnmqsaP3IsJIzrDsf1Anpj+V9upeQaiPUB74qCXCTqiFm",
	"suCJjS/1NgbUjzr6xpXZ2FZbo185dwez6WUABFksturo3vhKEkd1RAL6SbHg4hK4e+WiHds7OsJwsYBU",
	"s8sdGRf/NFpqE80/9XqsfUIpSMBgdcSaf/f5hup1A9C2hIit8AT1p+4MzlC89QVsHinSooZoGdSp53m3",
	"SVRGDCB3SAyJCBXz+FnDm3PCMFVTBmLBe9htd2hKvgzWnw/yh245lydJQsOcoi1TXoqY5j5qLtP1Rpl2",
	"GHw1lJTRrwA9LAgdY8FtVb8dUj/sHGg15KRfDurKJUpjfkxta/Yp06D8bz4Zzs5iHwxvKuSjZf+Kysy3",
	"iKqqXgtOttxHvUwKX724C/Sinpk18VD92PlIgRGMektzoRhfJkOhg+0QpPCxQXS02gqzGFxl4FqAdC9j",
	"aP8ee6KFj5/aBsc2VLiH8W6DBDVY1MsCN5hq/6GpJYBlEql9jd85kcMFGr2VGuhkkPE/POc2ZL+y332w",
	"uC+TN0Ijd/Sa7EzZ95FwTPWQGFL9grjbcncQ+m20Xsa5fSlJxdL/uUFlaD0upciq1F7Q4cFobAxji2ts",
	"YSVRhTHtr7In++dYauZtkNJzAZuZlb/TFeVNzZ/2sbYilF1DkELb2e17NQjEdZ98aRewvBc4/0ylejop",
	"hciTAXPxSb+KQfcMXLD0AjJi7g4fQzJQg558hVbK2h94tdr4rP2yBA7Z4z1CjFpelHrjXYPtgpydyfkj",
	"vW3+Nc6aVbawiNP39855PPwJS37IO/I3P8x2rqbAML87TmUH2VEmYD1QQUHSq8iLDGNfCY0467pV8hui",
	"slDEpJSdFdP7oP90/FNPPlhQllcShl+ydL2ivh33jv1gp9uXfh/5uF4IxGgk3Qg/WI2dL5O6HMwuDIVP",
	"5tTQ3eWeGFxyfMW3SyUetVN9U1CEIwY13LcrxWGlAZ8MnAppLYooRHua7O7Jjw2tjqsm7zvsAC+0lQT1",
	"5P0l5cD5k0PHfqyREixlkBJay99lfvFvHtfXVbBFCgPTzTKVrSMn+rpGYFtTr2qTVRzPfcsWlhUQHEut",
	"9C1iCi3MWK40JBzDruUlzR/eqoX1Jo4QH+45rvhCQ7NIiGSLSnW7IJa3dNTcgQnk/qbm79EK908wexR1",
	"DbihnHm9ruPvyw8iH6U5yUXzkgwOSa5wTOtLOPiazF2gcikhZYp1cjiufCXF2gqAhYWbV9q2mx12rfMX",
	"oe9Axk5vFCV511Rl0wLFhgbC5oj+yUxl4ORGqTxGfT2yiOAvxqPCjOEd18VFy8lgq1x2gnyEhHt2NgTR",
	"DTd0NvRzoccuD9eBl06loL/O0bd1C7eRi7pZ21hPWR+5ww4uPR/j4IpX5DPd0cNmEYLlLAmCSn47+I1I",
	"WGC9ekGePMEJnjyZuqa/PW1/Nsf5yZOodP9gvrXWg+Zu3hjF/DIUFGoDHwfijzv7UbE820UYrWjy5u0I",
	"jJf+1cXd/ymvV/xqzez9o+rqft/Eq9/dBERMZK2tyYOpgjjxESHirtte9Ml5BWklmd5gOQBvlWW/Rsss",
	"vakdOc4RWCeQurtPiwuoC0o0bp9K+dv1jbBP1BdGpsaYCo1P2L1e06LMwR2Ubx7N/w7P/vE823928Pf5",
	"P/Zf7Kfw/MXL/X368jk9ePnsAJ7+48XzfThYfP1y/jR7+vzp/PnT51+/eJk+e34wf/71y78/MnzIgGwB",
	"nfjks8n/xCdekqP3J8mZAbbBCS1Z/XKlIWNfXZ6meBKhoCyfHPqf/rs/YXupKJrh/a8Tl9syWWldqsPZ",
	"7Orqai/sMluinTfRokpXMz9P/8XA9yd13L3Nl8YdtSHVhhRwUx0pHOG3D69Pz8jR+5O94Nmtw8n+3v7e",
	"Ab7KVAKnJZscTp7hT3h6VrjvM0dsk8PP19PJbAU0R7eo+aMALVnqP6krulyC3HNl9s1Pl09nXpSYfXY2",
	"7utt32ZhxcrZ55YrINvRE4v6zT77XPXtrVvJ4M4FEnQYCcXwlPZN7NlnFGUHf5+h1mDJceZdV/GWLYA/",
	"6zXLrrs93Cu0s8/Ns9DX9rzmEHNU2YwNGrwiPSVMEzoXEvO1dboyR9QnijLVfkW8preTzNCZ6fWqfiI7",
	"qJF1+LH/QB8ORPxIeCgNxTVnpjVTwxa1rCAs21Qz/Vb7hvV/3E9efvp8MD3Yv/6bYe3uzxfPrkd6nF81",
	"L2yf1nx7ZMNPmGWJNhE8Sk/39+/wjNcRD5/7xk0KXouLvvpflcNGMrdVnYFIjYwd2WCd4QfeGH5+wxVv",
	"NeW04rsir3J8SzPik5hw7oOHm/uEo7/fsFhir5Dr6eTFQ67+hBuSpznBlkF6f3/rf+YXXFxx39Lc91VR",
	"ULnxx1i1mIJ/+B5vFbpUaO+V7JJqmHxCh0Is2nWAuShNb8FcTk2vL8zloZgLbtJ9MJf2QPfMXJ7e8ID/",
	"9Vf8hZ3+1djpqWV349mpE+VsnuzMvhzaSHi9VySWEE3YxdRZuu0x+i6HfQO697b+5I4s5k97Zv//73Py",
	"fP/5w0HQLoH+A2zIO6HJd2hi/Yue2XHHZ5sk1NGMsqxH5Jb9g9LfimyzBUOFWpYuty0il8wZNyD3b5f+",
	"m5q9t+8vYENs4JkPMOAig548dH1HHvCXfab/Cw/5wkOknf7Zw01/CvKSpUDOoCiFpJLlG/IzrysT3F6t",
	"y7JoUH/76Pd4mtFGUpHBEnjiGFYyF9nGV6VsDXgB1ojdE1Rmn9ul5a2hbNAsdYy/1y9e9oGeb8jJcU+C",
	"sd26nPbbDTbtaIwRnbAL4lbNsMuLBpSxbWRuFrIUmlgsZG5RXxjPF8ZzJ+Fl9OGJyS9RbcIbcrp38tSX",
	"6IkVsaK6P/UYneNPPa73stF9fSamv9jkB8hI8MFm6XXR/IUlfGEJd2MJbyByGPHUOiYRIbrbWHr7DALj",
	"vLPuA00Y6OCbVzmVRMFYM8URjuiMEw/BJR5aSYviyupolBNYMxvLGNmw+9XbvrC4LyzuL+S12s1o2oLI",
	"jTWdC9gUtKz1G7WqdCaubGnLKFfEVx9o7kpEY5xlHbOhBfEDNOnU5CdXiiLfYHApy4wYp1kBRqSqeZ3p",
	"7JNkmrBnM0LzUveScZwAWQXOYmuh0yBRUUEquH3XtuNrc5C9szphjMn+XgFyNIcbB+Nk2nK2uG2MVB6/",
	"s/zV941cb7GlI1XYiPB+PEb9cm3r79kVZTpZCOmSmBF9/c4aaD5zFd46vzbVSnpfsARL8GMQ2BH/dVa/",
	"1BH92A1eiX11ESMDjXx9Tv+5CV4Lg8Fw/+swsI+fzDZiHWhHGk1s0+FshomBK6H0bHI9/dyJewo/fqp3",
	"7nN9a7sdvP50/X8DAAD//4ELKeg7wQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
