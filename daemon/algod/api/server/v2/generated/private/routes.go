// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
