// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"T/XOfa5vbbeDV5+u/n8AAAD//yEi46hOxQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
