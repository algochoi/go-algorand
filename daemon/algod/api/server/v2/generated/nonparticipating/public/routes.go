// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"KNk5lpt7//H/BwAA//+zJsakvlMBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
