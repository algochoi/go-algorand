// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"R0Yl2QVWnHvz7v8PAAD//8JnbiTBUwEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
