// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"///+tuNi60wBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
