// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3PctpLoX0HNbpUfO5T8zJ6oKrVXtvPQxnZclpLdcyLfBEP2zOCIA/AAoDQTX//3",
	"W2gAJEiCHI4ky3aiT7aGeDQajUajn+8nqVgVggPXanLwflJQSVegQeJfNE1FyXXCMvNXBiqVrNBM8MmB",
	"/0aUlowvJtMJM78WVC8n0wmnK6jbmP7TiYR/lUxCNjnQsoTpRKVLWFEzsN4UpnU10jpZiMQNcWiHOHox",
	"+TDwgWaZBKW6UP7E8w1hPM3LDIiWlCuamk+KXDC9JHrJFHGdCeNEcCBiTvSy0ZjMGeSZ2vOL/FcJchOs",
	"0k3ev6QPNYiJFDl04XwuVjPGwUMFFVDVhhAtSAZzbLSkmpgZDKy+oRZEAZXpksyF3AKqBSKEF3i5mhz8",
	"OlHAM5C4Wymwc/zvXAL8AYmmcgF68m4aW9xcg0w0W0WWduSwL0GVuVYE2+IaF+wcODG99sirUmkyA0I5",
	"efvdc/L48eOvzUJWVGvIHJH1rqqePVyT7T45mGRUg//cpTWaL4SkPEuq9m+/e47zH7sFjm1FlYL4YTk0",
	"X8jRi74F+I4REmJcwwL3oUH9pkfkUNQ/z2AuJIzcE9v4WjclnP+T7kpKdbosBOM6si8EvxL7OcrDgu5D",
	"PKwCoNG+MJiSZtBfHyRfv3v/cPrwwYd/+/Uw+Yf78+njDyOX/7wadwsGog3TUkrg6SZZSKB4WpaUd/Hx",
	"1tGDWooyz8iSnuPm0xWyeteXmL6WdZ7TvDR0wlIpDvOFUIQ6MspgTstcEz8xKXlu2JQZzVE7YYoUUpyz",
	"DLKp4b4XS5YuSUqVHQLbkQuW54YGSwVZH63FVzdwmD6EKDFwXQofuKDPFxn1urZgAtbIDZI0FwoSLbZc",
	"T/7GoTwj4YVS31Vqt8uKnCyB4OTmg71sEXfc0HSeb4jGfc0IVYQSfzVNCZuTjSjJBW5Ozs6wv1uNwdqK",
	"GKTh5jTuUXN4+9DXQUYEeTMhcqAckefPXRdlfM4WpQRFLpagl+7Ok6AKwRUQMfsnpNps+38f//SaCEle",
	"gVJ0AW9oekaApyLr32M3aewG/6cSZsNXalHQ9Cx+XedsxSIgv6JrtipXhJerGUizX/5+0IJI0KXkfQDZ",
	"EbfQ2Yquu5OeyJKnuLn1tA1BzZASU0VON3vkaE5WdP3Ng6kDRxGa56QAnjG+IHrNe4U0M/d28BIpSp6N",
	"kGG02bDg1lQFpGzOICPVKAOQuGm2wcP4bvDUklUAjh+kF5xqli3gcFhHaMYcXfOFFHQBAcnskZ8d58Kv",
	"WpwBrxgcmW3wUyHhnIlSVZ16YMSph8VrLjQkhYQ5i9DYsUOH4R62jWOvKyfgpIJryjhkhvMi0EKD5US9",
	"MAUTDj9mulf0jCr46knfBV5/Hbn7c9He9cEdH7Xb2CixRzJyL5qv7sDGxaZG/xGPv3BuxRaJ/bmzkWxx",
	"Yq6SOcvxmvmn2T+PhlIhE2ggwl88ii041aWEg1N+3/xFEnKsKc+ozMwvK/vTqzLX7JgtzE+5/emlWLD0",
	"mC16kFnBGn1NYbeV/ceMF2fHeh19NLwU4qwswgWljVfpbEOOXvRtsh1zV8I8rJ6y4aviZO1fGrv20Otq",
	"I3uA7MVdQU3DM9hIMNDSdI7/rOdIT3Qu/zD/FEVueutiHkOtoWN336JuwOkMDosiZyk1SHzrPpuvhgmA",
	"fSXQusU+XqgH7wMQCykKkJrZQWlRJLlIaZ4oTTWO9O8S5pODyb/t18qVfdtd7QeTvzS9jrGTkUetjJPQ",
	"othhjDdGrlEDzMIwaPyEbMKyPZSIGLebaEiJGRacwznleq9+jzT4QXWAf3Uz1fi2oozFd+t91YtwYhvO",
	"QFnx1ja8o0iAeoJoJYhWlDYXuZhVP9w9LIoag/j9sCgsPlA0BIZSF6yZ0uoeLp/WJymc5+jFHvk+HBvl",
	"bMHzjbkcrKhh7oa5u7XcLVYpjtwa6hHvKILbKeSe2RqPBiPDXwfF4ZthKXIj9WylFdP4B9c2JDPz+6jO",
	"XwaJhbjtJy58RTnM2QcM/hK8XO62KKdLOE6Xs0cO230vRzZmlDjBXIpWBvfTjjuAxwqFF5IWFkD3xd6l",
	"jOMLzDaysF6Rm45kdFGYgzMc0BpCdemztvU8RCFBUmjB8CwX6dkPVC2v4czP/Fjd44fTkCXQDCRZUrXc",
	"m8SkjPB41aONOWKmIb7eySyYaq9a4nUtb8vSMqppsDQHb1wssajHfsj0QEbeLj/hf2hOzGdztg3rt8Pu",
	"kRNkYMoeZ2dByMxT3j4Q7EymAaoYBFnZ1zsxr+6doHxeTx7fp1F79K1VGLgdcovAHRLraz8Gz8Q6BsMz",
	"se4cAbEGdR30YcZBMVLDSo2A74WDTOD+O/RRKemmi2QcewySzQKN6KrwNPDwxjez1JrXw5mQl+M+LbbC",
	"Sa1PJtSMGjDfaQtJ2LQsEkeKEZ2UbdAaqDbhDTON9vAxjDWwcKzpR8CCMqNeBxaaA103FsSqYDlcA+kv",
	"o0x/RhU8fkSOfzh8+vDRb4+efmVIspBiIemKzDYaFLnr3mZE6U0O97orw9dRmev46F898VrI5rixcZQo",
	"ZQorWnSHstpNKwLZZsS062KtiWZcdQXgmMN5AoaTW7QTq7g3oL1gykhYq9m1bEYfwrJ6low4SDLYSky7",
	"Lq+eZhMuUW5keR1PWZBSyIh+DY+YFqnIk3OQiomIqeSNa0FcCy/eFu3fLbTkgipi5kbVb8lRoIhQll7z",
	"8XzfDn2y5jVuBjm/XW9kdW7eMfvSRL7XJCpSgEz0mpMMZuWi8RKaS7EilGTYEe/o70Efb3iKWrXrINL+",
	"Z9qKcVTxqw1Pgzeb2agcskVjE67+Nmtjxevn7FR3VAQcg46X+Bmf9S8g1/Ta5Zf2BDHYn/uNtMCSzDTE",
	"V/BLtljqQMB8I4WYXz+MsVligOIHK57npk9XSH8tMjCLLdU1XMb1YDWtmz0NKZzORKkJJVxkgBqVUsWv",
	"6R6zPNoD0Yypw5tfL63EPQNDSCktzWrLgqCRrsM56o4JTS31Joga1WPFqMxPtpWdzpp8cwk0M6964ETM",
	"nKnAGTFwkRQtjNpfdE5IiJylBlyFFCkoBVniVBRbQfPtLBPRA3hCwBHgahaiBJlTeWVgz863wnkGmwTt",
	"4Yrc/fEXde8TwKuFpvkWxGKbGHqrB5+zB3WhHjf9EMG1Jw/Jjkognuea16VhEDlo6EPhTjjp3b82RJ1d",
	"vDpazkGiZeajUryf5GoEVIH6ken9qtCWRY+Xl3vonLAV6u045UJBKnimooPlVOlkG1s2jRqvMbOCgBPG",
	"ODEO3COUvKRKW2si4xkqQex1gvNYAcVM0Q9wr0BqRv7Fy6LdsVNzD3JVqkowVWVRCKkhi62Bw3pgrtew",
	"ruYS82DsSvrVgpQKto3ch6VgfIcsuxKLIKorpbszt3cXh6ppc89voqhsAFEjYgiQY98qwG7o6dIDCFM1",
	"oi3hMNWinMq9ZjpRWhSF4RY6KXnVrw9Nx7b1of65btslLqrrezsTYGbXHiYH+YXFrPVxWlLzhMaRyYqe",
	"GdkDH8TW7NmF2RzGRDGeQjJE+eZYHptW4RHYekjLYiFpBkkGOd10B/3Zfib289AAuOP1w0doSKw/S3zT",
	"a0r27gMDQwscT8WER4JfSGqOoHl51ATiem8ZOQMcO8acHB3dqYbCuaJb5MfDZdutjoyIt+G50GbHLTkg",
	"xI6hj4G3Bw3VyJfHBHZO6mdZe4q/g3ITVGLE7pNsQPUtoR5/pwX0KNOcG3BwXFrcvcWAo1yzl4ttYSN9",
	"J7ZHs/eGSs1SVuBT50fYXPvLrz1B1N5EMtCU5ZCR4IN9BRZhf2IdMdpjXu4lOEoJ0wW/o4WJLCdnCiWe",
	"JvBnsMEn9xvr4XcS+AVew1M2Mqq5nignCKj3GzISeNgE1jTV+cbIaXoJG3IBEogqZyumtXXZbL50tSiS",
	"cICogntgRmfNsd5xfgfGmJeOcahged2tmE7sk2AYvpPWu6CBDvcUKITIRyiPOsiIQjDK8E8KYXadOQ9h",
	"70bqKakBpGPaaMqrbv87qoFmXAH5uyhJSjm+uEoNlUgjJMoJKD+aGYwEVs3pTPw1hiCHFdiHJH65f7+9",
	"8Pv33Z4zReZw4d3qTcM2Ou7fRzXOG6F043Bdg6rQHLejyPWBmn+895zzQounbDcxu5HH7OSb1uCVucCc",
	"KaUc4ZrlX5kBtE7meszaQxoZZ17HcUcp9YOhY+vGfT9mqzK/rg3Xa54spCiLGBtyrpTeN91c6kDNuyIA",
	"EztbKfrCCMYWOOeqPuZ+qJcTrP57M2qf1n466X14mSfpef3wwsdEy8V+LyriYMxAoso0BYi62MaeNNVi",
	"W6GEdXCIG9Bcy6W0PkaEprqkeWNXp7FIgiYFVdtUr74N9UgVPO6oEQy626iqvbCUpqmGj6POroeOQdmd",
	"OPA/qj/2uSCZp2i+uQaJwA5EJBQSFPLvUIWj7FcxD2N8HINXG6Vh1dVy266/9bwB3/a+pQTPGYdkJThs",
	"omGtjMMr/Bjrbe+Qns54m/f1bQvoDfhbYDXnGUONV8Uv7nbANt5UvnfXsPntcVsGjjC6CRV4kBeEkjRn",
	"qN4TXGlZpvqUU1QgBIct4qPgn0r9KqXnvklchxVRMbmhTjlF/5RKrRC1q84h8ob+DsBrllS5WIBqsToy",
	"BzjlrhXjpORM41wrs1+J3bACJDoK7NmWK7ohc5qjBuwPkILMSt1knxiEoTTLc2dtMdMQMT/lVJMczPPy",
	"FeMnaxzOWys9zXDQF0KeVViIc/sFcFBMJXFfiu/tV3Rzc8tfOpc3jIi1n61+3oxfR2psUL9QR3n+37v/",
	"dfDrYfIPmvzxIPn6P/bfvX/y4d79zo+PPnzzzf9r/vT4wzf3/uvfYzvlYY+FCDjIj164d8vRCxROawV9",
	"B/YbU86uGE+iRBaaoVu0Re4aEdsT0L2m6kIv4ZTrNTeEdE5zllF9OXJos7jOWbSno0U1jY1oqSr8WncU",
	"+a7AZUiEybRY46Wv8a77UTwYBy1GLr4Gz8u85HYrS+WsVuhr7t1AxHxaBVzZRAsHBKNxltT7MLk/Hz39",
	"ajKto2iq75PpxH19F6Fklq2jghysY5K8OyB4MO4oUtCNgh5ZEWGPerxYw3s47ArME1AtWXHznEJpNotz",
	"OO/B6zQCa37ErWutOT9of9o4tbaY3zzcWhqRudDLWAB2Q1LAVvVuArR8AgopzoFPCduDvfaLPFuA8r43",
	"OdA5BgKjDUWMiUiozoElNE8VAdbDhYx69sboB4Vbx60/TCfu8lfXLo+7gWNwteesjE3+by3Ine+/PSH7",
	"jmGqOzZszw4dBFpFnpgulqDhLWK4mU07YeMWT/kpfwFzxpn5fnDKM6rp/owqlqr9UoF8RnPKU9hbCHLg",
	"wxNeUE1PeUfS6s0MEwSGkKKc5SwlZ6FEXJOnjfbvjnB6+ivNF+L09F3HcN6VX91UUf5iJ0gumF6KUicu",
	"nDmRcEFlzDChqnBWHNkmIxiadUrc2JYVu3BpN36c59GiUO2wtu7yiyI3yw/IULmgLbNlRGkhvSxiBBQL",
	"De7va+EuBkkvvL6hVKDI7yta/Mq4fkeS0/LBg8dAGnFev7sr39DkpoDRWofesLu2qgEXbt81sNaSJgVd",
	"xAwgp6e/aqAF7j7Kyyt8ZOc5wW6N+DLvP4tD1Qvw+OjfAAvHzrEyuLhj28vnpYkvAT/hFmIbI27UVtnL",
	"7lcQcXbp7WpFrXV2qdTLxJzt6KqUIXG/M1W6ioURsrypXLEFuiO6zB4zIOkS0jPIMMkArAq9mTa6e28M",
	"J2h61sGUTcZh40UwYhzVxzMgZZFRJ4pTvmmH7irQ2vtDvoUz2JyIOuB8l1jdZuio6juoSKmBdGmINTy2",
	"boz25juXH1RlFYWPwMRQHE8WBxVd+D79B9mKvNdwiGNE0Qht7EMElRFEWOLvQcElFmrGuxLpx5ZnXhkz",
	"e/NFcnd43k9ck/rx5LxzwtVgxKb9vgLM7CMuFJlRI7cLl5TGhkcGXKxUdAE9EnKowR8ZhNjQ+uMg2+69",
	"6E0n5u0LrXPfREG2jROz5iilgPliSAUfMy2fLD+TNRJZBSrBXHMOYbMcxaTKec0yHSoblhSbPKsPtDgB",
	"g+S1wOHBaGIklGyWVPl8OZhWyJ/lUTLARwz3HUryEOreg9xBVQoHz3Pb57TzunSpHnx+B5/UIXxajkjQ",
	"YCR89GCObYfgKABlkMPCLtw29oRShx7XG2Tg+Gk+zxkHksQ8k6hSImU24VF9zbg5wMjH9wmxKmAyeoQY",
	"GQdgo/ETByavRXg2+WIXILkLnaZ+bDSbBn9DPMrD+uoakUcUhoWzHltP6jkAde5s1f3VcqrEYQjjU2LY",
	"3DnNDZtzL756kE6uARRbW5kFnPn9Xp84O6CBtxfLTmuyV9FlVhPKTB7ouEA3APFMrBMb5hWVeGfrmaH3",
	"qPsyBp3FDqbN6nBHkZlYo0sHXi3WXXYLLP1weDCCF/6aKaRX7Nd3m1tghqYdlqZiVKiQZJw6ryKXPnFi",
	"zNQ9EkwfudwNEjVcCoCWsqNOaeoev1sfqU3xpHuZ17fatE5A5CNDYse/7whFd6kHf10tTJVawakQ3kIq",
	"ZNavpzCEynSVI7arXnAZbg3fGJ18YSBf7WHzteGfEN2d6/E8aMBTzzOAiBc2rqkDybfrQhjp1sY92SQY",
	"DilWTpRgwzmV1Vkpxhc5VN6hUTTFFuz9njzG7ZLrpFZ+wHGyc2xzex75Q7AURRyOXV4qbx1+BqDoOeU1",
	"HCiHXxESlwhjEJYP/fTxpi3aRw9K04WnmX4leGvFbgdDPl1rZtdmqiAHfD0njddGchazcZ+e/qoARbNj",
	"3y3Q8mGSF8o39wK/MAkLpjTU1iYjwXpM37Qen2JuOSHm/avThZyb9b0VopLnbPIi7NhY5o2vAP2q50wq",
	"naCpLroE0+g7hdqn70zT+KOi6Xlm06yyLH6J4rRnsEkylpdxenXz/vjCTPu6kh1UOUPBhHHr8TTDtMBR",
	"f9SBqa3L8uCCX9oFv6TXtt5xp8E0NRNLQy7NOb6Qc9G66YbYQYQAY8TR3bVelA5coEEYcZc7Bg8Mezjx",
	"Ot0bMlN0DlPmx97qX+WDmfuEOTvSwFrQNajXATjikGP9yCxTrysCRAN+udBJQ/kRQVel4FGantmgteYG",
	"80WlU4m7Tdl39aihXdstA/Lx4/HtwzkhOMnhHPLtjtYUMe4VOOgZYUdA1xuCIQvex2O7VN/dgRph1Urb",
	"MEappSPdDBlu66eRy9FXv62RYA3uXHT9aOudkdA8vdX03TXdFUWSQQ7RWLb/CTw7aVGgO6tvHAsaMoMx",
	"nsE6Do79NI3l7e8q70vGtc3xel3pI1vjjF92mGRxDAoKmw5w9xSV/W/MYJdCNPcvqocoK+PAICPGwauX",
	"XVDxpE19Pdc4LQqWrVt2Tztqr3b8WjCGF5QbbAsGAtqIRUlKUM3kmrUyz6Z4b+S22huFmZNmCsxQpgmn",
	"YsoXKOkiqoqi3oarE6D5j7D5xbTF5Uw+TCdXM5PGcO1G3ILrN9X2RvGMbnjWbNbwetgR5bQopDineeKM",
	"yX2kKcW5I01s7m3PNyytxbneybeHL9848D9MJ2kOVCbVa6d3Vdiu+GJWZfN49hwQXwBhSXWln7Ov4WDz",
	"q+SDoQH6Ygku2XzwoO5kxa2dC4Kj6AzS87g38FbzsvODsEsc8IeAonKHqE111hui6QFBzynLvY3MQ9vj",
	"uYuLG3c3RrlCOMCVPSnCu+ha2U3ndMdPR01dW3hSONdAOvyVrfigiOBtdzmM+9kUzsNuRTGnrbWAdJkT",
	"L1doNUhUztK4PZXPlCEObv1kTGOCjXve02bEkvW4XfGSBWOZZmqEUrsFZDBHFJk+P3If7mbCleoqOftX",
	"CYRlwLX5JPFUtg4q6k+dZb17ncalSjewtcbXw19FxgjzObdvPCdzDQkYoVdOB9wXldbPL7SyPmEUVO1+",
	"sINzXzhj50occMxz9OGo2QYqLJveNaMl9K1lvbz+zSWW7pkjWqaLqWQuxR8QV1Whhi8SgeozWDP0aP0D",
	"xoSU1ZacutpYPXvvdvdJN6HFqemQ2EP1uPOBCw6m0vXWaMrtVtuqOQ2/9jjBhBEk+3b8mmAczJ2om5xe",
	"zGgsz7ARMgxMgfmlYTfXgvjOHveqije0s5PAb6xqy2xykQJkHRzeTVR2SYHBTjtaVKglA6TaUCaYWl+f",
	"XInIMCW/oNwWX0JrBB4l19s88L1C6EJITA2k4ib+DFK2iiqXTk9/zdKuOTdjC2ZLD5UKgto2biBbs81S",
	"kasPZN3patQczcmDaVA9y+1Gxs6ZYrMcsMVD22JGFVilivfc8F3M8oDrpcLmj0Y0X5Y8k5DppbKIVYJU",
	"Qh0+bypHlRnoCwBOHmC7h1+Tu+iio9g53DNYdPfz5ODh12hgtX88iF0ArsbYEDfJkJ3493+cjtFHyY5h",
	"GLcbdS+qDbCFIfsZ18Bpsl3HnCVs6Xjd9rO0opwuIO4VutoCk+2Lu4m2gBZeeGarmiktxYYwHZ8fNDX8",
	"qSfSzLA/CwZJxWrF9Mo5ciixMvRUF66xk/rhbIk0l3Pcw+U/oj9U4d1BWo/Im7X72Psttmr0WntNV9BE",
	"65RQmw8qZ7Wnoq+EQI58ujlMwl7lXre4MXOZpaOYg46Lc1JIxjU+LEo9T/5G0iWVNDXsb68P3GT21ZNI",
	"4vlmAmS+G+A3jncJCuR5HPWyh+y9DOH6krtc8GRlOEp2r47sDE5lr+NW3EWnz09oeOixQpkZJeklt7JB",
	"bjTg1FciPD4w4BVJsVrPTvS488punDJLGScPWpod+vntSydlrISM5ZCtj7uTOCRoyeAc/fTjm2TGvOJe",
	"yHzULlwF+k9rPPUiZyCW+bPc+xDYxeITvA3Q5hN6Jl7G2tO09DRkrqjZB1844ywgtq7qNrvHVSouNTrv",
	"ApXn0OOg61EiNAJgWxjb7QV8dRVDYPJp7FAfjppLi1HmMxFZsi/TUdl4XMRkRG/Vd4GYD4ZBzdxQU9Is",
	"iXDzHjXeLNL17DBfPKz4RxvYT8xsEMl+BT2bGJRriW5nVn0PnMsoeSbWYze1xbv9xn4GqImipGR59kud",
	"G6RVDUdSni6jziIz0/G3um5ntTh7mKNJhJeUc+uN0NVN4CvlN/+aiby3/inGzrNifGTbdoEeu9zW4mrA",
	"m2B6oPyEBr1M52aCEKvNtAtVWF++EBnBeeqMtfW93i3sFJTf+FcJSsfuRfxgQwtQoz43VGyrYADPUI+x",
	"R763dfeXQBr5CFF/UKWdcrUIrKmnLHJBsykx45x8e/iS2FltH1t9zlafWNhrt7GKfv/cXRxth3xrryOi",
	"z6xaaUwPqjRdFbEUJabFiW+AeVBC6xI+rEPs7JEXVqeh/IvZTmLoYc7kCjJSTeekaqQJ8x+tabpEZUGD",
	"pfaT/PiyKZ4qVVCquCo5WGWoxnNn4HaVU2zhlCkRRnK4YMqWW4dzaGZFqVIEOTHAZ0lpLk+WnFtKiUrF",
	"QymsLoN2D5z1gvQGqChkLcTvKL04N/Udq8gcY69oxsx2SZpOjWKbY6MqJffKV5mmXHCWYr7K2NXsSreP",
	"sc6OSO0Zjwxw/jZqEjlc0UI4VbCGw2JvaRzPCB3iuuah4KvZVEsd9k+NNcKXVJMFaOU4G2RTX8/JaagZ",
	"V+AyjmMV/4BPCtmweCOHjDpR1HLyjmSEwdk9KofvzLfXTiGFUYtnjOPT08dI2ABJq0PGytLavFeZJguB",
	"ERTuUIRr+tX02cNkLRms3+35StQ4hjUYm2Vb74juUIfeV8L5Jpi2z01bm1Cv/rkRB2cnPSwKN2l/ta+o",
	"PKDXvBfBEZt35egVILcaPxxtgNwGnZzwPjWEBufoIgEFcaExPZWvWkEwRmi1FIUtiPWPjubRirqJvmQc",
	"6jrpkQsijV4JuDF4Xnv6qVRSbUXAUTztBGiOfhExhqa0M4pddajWBjt/0iKd+Dn6t7Eu2tXDOKoGteBG",
	"+aYqz26oOxAmntO8chKKlOBCqcoJUS64plmUK8Y4DOP2Zf+aF0D3GHRlIttdS2pPzi43UV+qklmZLUAn",
	"NMti+oRn+JXgV5+NFNaQllWm8KIgKWbma6Yq7FKbmygVXJWrgbl8gytOF1S5i1BDWGnP7zA6Xs82+G8s",
	"TXb/zjj3oJ197L0vUFaFz+0iNzdH6ki9hqYTxRbJeEzgnXJ1dNRTX47Q6/7XSum5WDQBueEEZUNcLtyj",
	"GH/71lwcYf6uTu53e7VU6bXQHVT42sT4bKwSwzS5ko867cwZ1D4dVkD0VzGd4uXXE9cS6HqpvV+tXbsv",
	"uiXtDcai2uVP0JQMsqDemHTrV2ajzxGKuE6/z5fMupKZz53e4yTDjpyNYw8i1DspdgH60XtAk4Iy57RR",
	"M4suZl24V7+6cOjQ1RvcXoQLourV2P143hfw5OOAbWRHq+7jGbikSoWEcyZK7w7h/eX8k9D+6uruB3HF",
	"vevv+s3gVJ9WDdqrtD1xNYbsMt2b/MdfrHclAa7l5jNQ4XY2vVM1M5azuFEz0wlXUX2THntXvqgKb56d",
	"JyuRDQVM//gLeeFtS6PuHU/IsXRLInOV6qLB4i9dmQnfzEifo6d95TodFsXw1D0R4t3JbcNdp+9LNWXO",
	"55DW7Y0/v7bWaKhCiLxVgnBmDmvdU2CqHQ17AQTWBWCu2yCwuT97xliCckGO+FpNcqAKBjAcZm1zbUci",
	"+WT90rQfF2wfr/ban3K2TjOLzLMQitUFgGJlYEe6HJ9gJdfAYtgdy/v7nUOqsepT7cckAXZJoGsmC0qM",
	"36ae7VGUVJ7Znv4H0sxOJyFviQYquuNF6xQ5aFVDk2skVb1tE2H2rjMzh6SEqR/C/DCnuYpXXut1dm1l",
	"PgkcViKJnuMLO8pGZPt2y5kGPhAsG0ZkPBLAOn//OZFp/dqvF52dumDDr4pO4oUgeYgt37S3gwNJ5UWN",
	"kiHu1wK4qz4/j6Fme1TUfA6pZudbEl38zxJ4kERh6jXBCMs8yHvBqigbTCi6u52jBmgoD8UgPEFi/yuD",
	"0xcjegabO4o0qCFaT2rqhfvL5JJEDOCtZQSPQqiYl6I1XTnHMaYqykAseK9g2x3qrNy9lWgDOeeSc3mS",
	"bEo8A1PGS2GOmst03SkTGAaM9OXC6JbS69d4vMDKhaqqEu9zUYZ6QXLUzdh/4XJZYlqSylrrs1qC8r/5",
	"HER2lpydQVgrF23jmELBtYgqe70eORmQkzrR374MXBvoeTUzq2M4uvG+kRzQ6P2U5sI8gpO+cKdm2ETl",
	"5nVHWedQW6oLA0IMXHOQrqY43gy5UJBo4V3rhuAYQoX1gL0UElRv3QULXG821Ld1ulesP2OTZVDn+Bou",
	"kEhYUQOdDJKy9s85hOzn9rsPcPU5ubbqtCt6TbZmVfXRO0x1kBhS/Zy423J74Oxl1NuMc5CJt3W3fQq5",
	"QWVofy2kyMrUJYIJDkZlAhidsGyAlUQ1w2l3lR0lX47ZwF8GaQjOYLNv9S/pkvJFkF4thN6K9nYNQeay",
	"1m5fq+Y/ruTMF3YBi2uB81Nqz6eTQog86TG4HnUTzbbPwBlLz4yYXdZ+7z3FPMldtPNVHjUXy41PrFoU",
	"wCG7t0fIIbeRRt65plnpqDU5v6OH5l/jrFlpcz87xf7eKY+HbGBSH3lF/uaHGeZqCgzzu+JUdpAtaUzX",
	"PUluJb2IlLbt+tONdndplxuticpCEZNStpaejDjz+B6+NqYPadVixdJuScWOMDHHKs0JjQx+VLHwaaOG",
	"PmuV3PQJh23NxpRaEc48HyjLSwkRC1+4Ja3j5zolgY1oDFjR82ghskskWw5blDWseWLxqsbi3kB0zrKS",
	"NgzJ6krVR/sKj0aKcnpoR5PXzpQVX2CHrrCWKF8kVVr0mDHG6Qr8NmIwQRVm0JIvmCJuzDrVuoqqHWo8",
	"XOUu70VuHLeXy7I3iia6drnIsQkKmA4rLsIknHUAgrTmXXzo+JPX3tJX9YkcV0rVd9gCXqhnDYqpekHC",
	"gfOJowReVUgJltJLCY3lb1PdugXWLCzYIoUBz2aZNne49TBt7kugl1fPK3V3XzHitlYcM24Kjum6u9p0",
	"heZ+m0E5IBzDv+U5zW9eI46pWA8RH5C97X+rhKqrEMkWlepyrrov6ai5AzXV9U3N36AG/3/A7FHUT8MN",
	"5ey2VRFbb91Glklzkou6bDoOSS5wTOvY8fArMnMBsIWElCnWyg1w4QsSVZoarM/n3KPXeotqaNs6fxH6",
	"CmTs3vaiIK/r4iZa4I1RQ1gf0U/MVHpObpTKY9TXIYsI/mI8KsxEteW6OGt4fNhiUS1XZiHhmj0/Ah/O",
	"HT0/ujm2xi7PejeYS6dU0F3n6Nu6gdvIRV2vbazbUhe5QxUwxngbxQvbmO7o7mQRglWhCIJKfn/4O5Ew",
	"x7Kvgty/jxPcvz91TX9/1PxsjvP9+9EX2I05OlkcuTHcvFGKcXbwThQbrAsme/J1vnXM3V3YaHkn2AHi",
	"iXVziBZywqm9y/cNZ3HH5/JW25xdmmu8jZ8FKPNLriaK4f6XvrAjG1rTE+HWOgsly7Nth7IRr1gXrcaI",
	"vN9cLP0nKZv9mzVDddmkK126i3tr+wAgYiJrbUweTBVEIo4IQnTdIiGHSFxpKZneYIo/b7Vgv0Xd4b6v",
	"DJ3OgaNKCuXkDi3OoEoSWZtFS+Ulm+8FzVEWMO8ZdC7WQuR75Ns1XRU5OCb1zZ3Zf8Ljvz3JHjx++J+z",
	"vz14+iCFJ0+/fvCAfv2EPvz68UN49LenTx7Aw/lXX88eZY+ePJo9efTkq6dfp4+fPJw9+err/7xj7gAD",
	"sgV04hPKTP4Xa8snh2+OkhMDbI0TWrAfYWPL2Boy9gVyaYpcEFaU5ZMD/9P/8dxtLxWrenj/68Tlq5gs",
	"tS7Uwf7+xcXFXthlf4F2kESLMl3u+3k6FXQP3xxVkZ32WY87aoP2DCngpjpSOMRvb789PiGHb472aoKZ",
	"HEwe7D3Ye4hpyAvgtGCTg8lj/AlPzxL3fd/n/z54/2E62V8CzdGdxfyxAi1Z6j+pC7pYgNxzlYLNT+eP",
	"9r0Yt//e2YA+mFEXMZcHG6MaBCZ2C+g6ezI6+tsY1EZBOuWyw0+rMoVOa8QzDB20ZhXD4itkHWV1Boij",
	"mlH5TIU2dfPBrxFfxDlblBJVUXVmhcrL2tUwZYr89/FPr4mQxD0n39D0LHS7RIL8VwlyUxOMY2VhzmFf",
	"Us4F8a3UomhGvNQsPfK0iFYixpnNPgeUWplja06EDiNh/faKrxpe+SD5+t37p3/7MBkBCPoGKMCMVL/T",
	"PP+dXDAsaIsG1mZWCjWNlE/Dp8m0Nu9hh3qbphiyU30NK+RWbZqBor9zweH3vm1wgEX3gea5aSg4xPbg",
	"HeZMQkrAQ/TowYNrK61dxUbbwJ9qFE8Slxioy2Hsp6pE94WkhT1oPlcKRpqjXsEvFAuKP7nGhTYjG668",
	"3PZwnUU/oxlWLQWl7VIefrFLOeLonmM4PrE32ofp5OkXvDdH3PAcmhNsGSQk7N4iP/MzLi64b2mkmXK1",
	"onKDskpQWrmVd4EuFFp6kEXas92sZvHuQ++Vth/Witx/3/DwyK504XXK5B692HIH3lF9nLObzrtVitIV",
	"0LDpddAHwNXbxNqH6t4e+T7sjdwbs2PZ3FOl5M7H0OmmWGb4sHuQ+CSiNWx3VOg6GL2RA9377eX8US/n",
	"w6ZaqJEPOgZMg8QHYeq4gF31duzGzl5HhZOg4uMlaml81HLGrZehneld7OG2lQvf4q4Hd30yUABvJQ41",
	"CxB+fL7rY9Wqa6JxH3xErvyFS3SvaG7oJFhuK4+HTZJ+K+n9ZSS9yit4YUUvVxfkarIfBsftv/eJ769B",
	"3nOJ/0dIeo1MjnXfIDH73RY7ubfnCr8GbS7HM5wb8FYZDssR3EpvH1t669bxiIFRV2f4dBLbVdKdNmpw",
	"75Qt9AsV0f7CyOqVyVzC4C3S2CV4Y0fScpz4o/HMP6WE5ZB2K1v9pWWrKvLmStJVoxKPi+UKrEtX0ru1",
	"9WpMV2JWM/oq4GwYDWYYijvC07pqoGExmC7PZ0pSU//sQ8umfRHazZp2HoVd+el7CF+fzzZHL7aJTl+Q",
	"Emd02tbILRDfm4/NS6MGg7c3YzAYx5uePHhycxCEu/BaaPId3uIfmUN+VJYWJ6tdWdgQR9qf2YTyQ1yJ",
	"t9gSMoo6UXzAo7BSVJiM3jpK3MXiis0EP/f2iE9br6ryUC7TxkIYBuXT51G5sJ0MjzNIIHf8nwc4/p09",
	"8h0GSmg1RV877WoHkTuM64OHjx4/cU0kvbCubO12s6+eHBx+841rVpfPsO+bTnOl5cES8ly4Du5u6I5r",
	"Phz879//sbe3d2crOxXrZ5vXNiPo58JTp7EQi2rj+3brC9+k2CvdZWrdirobMbg/E+so9xfr29vnk90+",
	"Bvt/iltn1iQj9wCt1JONCP5rvIXsMdnlHpr6pP+G71SXyR55LVwylTKnkgiZgXT19BYllZRrgGzPUyoG",
	"8ymbPCLNGXBtHoxYIUwmimVgY9AXpYSM5GyFJfQlnGOIAE6Pb/kGBNsZPTr1frZM/hVdBwkWZtU1rYVb",
	"MqarWNG1r1GIVbiExJ+++YY8mNavljw3AyQVYmLMdUXXkxvU9lXENsr9vlmsZauPLI49RnNUSz+2HCxt",
	"Vob4a3PuL1Zit+TuNvaaOOfO1pzaWhPqD1zKkkHNgRXsbAVDLKm3qaOcjZTnRag4izMzjFUKfMa2ga0q",
	"6ejjs43e20N8+/i/EitpE9SObAODbtX+e7RlhDyjc24xaPBPZAMNDEJSrLxFSJA56HTpgpFbeI3wHl8H",
	"pp/xDNWnvm6RBbeoW4YgTFOKdZNH5hcJ4kTRKgcyQqE/+ZTs5jObY16MqsaPL8OO9ibmK5NWRUld6Wam",
	"vHu9j1k2u7gTlM/rybvSFqLlOoyatwjeDcEdzvetrzOIGHOL+DM44Pt3YkJeizok3pW4+TPaEz/mtf2x",
	"F/RacLCGcyPWWlq8tZFWMgXq5xEpPheKfZxUxQYuLV/s+4qZg0LGD7Ze5aCgMeb2NpN9kVf4Dw5LA7eM",
	"Wdve1sDoerQxzNk0tKnSm0nSP+ET5ZPw08/w3fIpONbNsBg8pJ7POLGAXy/TwfRClpj3qzzEfRwoXnJg",
	"NDfSovIti1YJmEEu+EJ9nqxoiDrieIlQSVWMIV5x4a93dp9j5iIufH5fl8tKMZ6CrQiLxazqRHMWwr/d",
	"HISarXzqTh6Gkn5i7vL0weObm/4Y5DlLgZzAqhCSSpZvyM+8qt57FW6Hefur3HJe1RstIYKmpGbOszRM",
	"0HR5JtjwR3uv1yz7sJ0ZBhkKd+SDjAd8MMynSIsCqLw8A9xulzppzXj0InT5baSTr7KFRUAxKNrR6/0/",
	"JiP1ThiFLubu8iu5BdRnNnNswvnjivm08nwxUoCYH5BTfp+oJX368NFvj55+5f989PSrHs2ZmcclJOrq",
	"zuqBzGc7zBgF2uer67tekbxC3sFNb+VuOzSdsGwdzR1d1y3q5M91MtcdRQq66U05X2ypuxQOW9dguvks",
	"jUqz2TL6ePJvm6oM+RF/Vj1xbSpBV67ott5ST7hDwEQModWFlyqsD9dgGhAVW2RZFRW56ZdnHRZgbzGP",
	"PNm6UD6pFKs/1Qs0wQcocC+1NNHy6QRGzG8+DQzVvl6/9Topi0JIXZ1utTdKloM+g1tDlOsj3J0ktZTq",
	"dFkW++/xP5ge60MdKmBLKQcWOve7LSa5b+3vQ0LcsW1xxTuxJS1bq79sMiefqc35BIg5ecVSKQ4xbb67",
	"btRGaVh1S4DZrr/1RG/5vKPdq0nwnHFIVoLHkrz9hF9f4cfeCol9nbEiYl/fdsWvBvwtsJrzjOGMV8Xv",
	"Z/LOvpJ+qLVaCeYY17XOLP3veNT8odnwtHuSNjztHrNGwbWen/ffN/503jeupVqWOhMXQV983VleNMbw",
	"HiT+Hq8Urx48rQTaimSgDNF+eRqoAA+xE1N9jWT/CtK79yYA+4vqpOaMZy0iQYkyFecgVaWtkN5R5lYx",
	"9edRTI3e9514rE1luY2jlep6JZLXIgM7bjN7bCzQk4sMXMbNriBSyWDx976/lep2rRdYSsvFUpOyIFrE",
	"3np1x4SmlsnakoxqWw0728qXjzkHQnMJNNuQGQAnYmYW3awFSqhCJ/eq4qmVNOOl2Gq4CilSUAqyxAe2",
	"bgOtymOKz0s9gCcEHAGuZiFKkDmVVwb27HwrnFXedUXu/viLuvcJ4LWi4DBirWttBL2Vh4+T9rpQj5t+",
	"iODak4dkRyUQLxqgfkusihychiuCwp1w0rt/bYg6u3h1tKAKiH1kiveTXI2AKlA/Mr1fFdqywFr5kWKR",
	"9usJW6EkxikXClLBM9Vf0nUbW8baJ8FalFlBwAljnBgH7nlwvqRKv3WWjLDyXVBjxUwxUIO2L8e8GfmX",
	"KsN8Z+zU3IdclapKQ+8UGPFSYRzWA3O9hnU1F5qS/NiVhkQLUirYNnIfloLxHbJUWFRWBzYgrIDSXRxm",
	"I6FOQdFFZQOIGhFDgBz7Vo3icbV9ogcQpmpEV5Uim5QT1PpSWhQF1q9LSl7160PTsW19qH+u23aJyxV1",
	"wHs7E6BC7ZWD/MJiVmG4xZIq4uAgK3rmFFwLl60pUp+MrSBBq3MyRPnmWB6bVuER2HpIy2IhaYbFRmlE",
	"lfKz/Uzs56EBcMc9eWIl52QG82hFFbPpNSXLXhVRNbTA8VRMeMTCz4qk5gjOscSPJxDXe8vIGfRUnT4J",
	"KmG65jhXdIv8eLhsu9U9aikzhtlxSw4IsWPoY+DtQUM18uUxgZ2TWnvQnuLvoNwElRix+yQbUH1LqMff",
	"aQFtbV54fzUuihZ3bzHgKNfs5WJb2EjfiY3pD7/IcLy22fYjOpw19afB+2/vMm/b/QvKdDIX0tXSp3MN",
	"MqLKa5URoEz7aD9rQNHCuUMQHMFdm24cV5O9TpnhmIgFgfiyo2wVycBjpvpOyFEhO03fNco0KblmeRC2",
	"XL2UPz994a0O4FYHcKsDuNUB3OoAbnUAtzqAWx3ArQ7gVgdwqwO41QH8ZXUAnypML/ECh/dv5oInHBZU",
	"s3Oo4vdu0wb9qcJaqqvK6yRQi3FBmXZJOAn1YgB+uVpUnwaaIw5YbssmC9Wb3QirWCtRyhRIaiBknBQ5",
	"NU8DWOsqJVwz2ahPf+zqWGP+Uqrg8SNy/MOhd9BfOkfyZtu7vnyx0psc7rm8DFWxU5+gAbhBusvPQP2V",
	"4FPHuUR6LAeiDHq/xdYv4BxyUYC0vr9EyzKi8TkBmj93uNmi8GmUszSj/T5t6Jkc2la0COr141qpIhSD",
	"OVrVKOc0V/3lKO14K1rEsrdVF59VBSE3eSayTeuEmF3bxw1sno3aTZ9xKjeR+JvOieiQhhaGXznC6uqy",
	"Plx7MEmXaLtkto3CYtK6BBU9x0NUHo2iqDasM5SN5Jm36CRai7kdOjCpABzjAGvo2e8JeWv7fdo4dITI",
	"HbGamX82foPNlhXTwLbmEeFYz5caNO4RHz29ePanhrCzMgXCtCI+HmX79TKdrBMz0gJ44hhQMhPZJmmw",
	"r0njFsqYokrBarb9Jgr5p8tX7C4f82X4nvo018iLYHFDPDkkmnXiGHAPd95oGM2bK2zhiI49Bxj/2Cy6",
	"j42GIBDHn2JKpXaVmB2ZXj3N5pbx3TK+4DS2JALGXfxem4nsfUTGJzey5P0879s1pKUBLjzJd1E7jyY5",
	"WOuGXTODWblYYN7ljo3OLA1wPCb4J2KFdrljueBuFGQHr3JxXjVDVHu4LncJYtXuCkkWUpTFPVtgim/Q",
	"mLEqKN94ky8kiq3K3OLQZrW7XkZrQ+y6jgBojnW6vz6t9huv8gt0t+6qbf5u0UIuqCJ2fyEjJc9c5FAn",
	"EHfNx+d8tkOfrHnNpgezPtv1Rlbn5h1zRfhddiEulZm7AJnoNbcHqpmY3Qb82pO7d5tv9q9xbbyxhdx6",
	"GGw3eLVmCNd0e8iAr+H1EeQfqUPhmlWybA2/vsCRMBmJbXmtziOd4Zs+JEEFPWsjhbwg1BcDSAVXWpap",
	"PuUUbTTBwva6/iVeG93P3577JnEzYcSK54Y65RRzxVeWmyifm0PETPEdgGejqlwsQBleGRLJHOCUu1aM",
	"k5Kbl5aYkxVLpUhsGKo5Q0Y+2bMtV3RD5jRHI+MfIAWZmZs92HWrMFaa5blzaDHTEDE/5VSTHKjS5BUz",
	"XNYM5xOFVZ5coC+EPKuwEE9fsQAOiqkkrnz53n7FDBFu+V7JhwpL+7mO7L7Z1BAedpb1Qn70wsBNMdNN",
	"zpSufSA6sN+Y/XvFeBIlspMlEOcS1qYtctcwXk9A95rWIb2EU25uOC0IcnWqL0cObTNP5yza09GimsZG",
	"tKxBfq2jnnjXwmVIhMncmlb+RIGZAR148yVuPFaRae/9jmaUwcKUsa8uXVhPI/dIAP/ZniK8482yIC0l",
	"0xu0Q9CC/XYG5v/vPrwz3+S5N1GUMp8cTJZaFwf7+1hxcimU3p98mIbfVOvju2rl7721oZDsHHNUv/vw",
	"/wMAAP//0bIvwsZLAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
