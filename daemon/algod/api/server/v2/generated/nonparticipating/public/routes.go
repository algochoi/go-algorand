// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Pv//AAAA//8eREHf9ScBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
