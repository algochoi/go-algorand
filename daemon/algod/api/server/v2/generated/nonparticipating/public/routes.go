// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3PbuJLoX0FptyqPFeW898RVU3udZB7eSTKp2DO754xzZyCyJeGYAngA0JYmN//9",
	"FhoACZKgRNmOncz4U2IRj0aj0Wj08+MoFctCcOBajfY/jgoq6RI0SPyLpqkouU5YZv7KQKWSFZoJPtr3",
	"34jSkvH5aDxi5teC6sVoPOJ0CXUb0388kvCvkknIRvtaljAeqXQBS2oG1uvCtK5GWiVzkbghDuwQh69G",
	"nzZ8oFkmQakulD/xfE0YT/MyA6Il5Yqm5pMi50wviF4wRVxnwjgRHIiYEb1oNCYzBnmmJn6R/ypBroNV",
	"usn7l/SpBjGRIocunC/Fcso4eKigAqraEKIFyWCGjRZUEzODgdU31IIooDJdkJmQW0C1QITwAi+Xo/1f",
	"Rwp4BhJ3KwV2hv+dSYA/INFUzkGPPoxji5tpkIlmy8jSDh32Jagy14pgW1zjnJ0BJ6bXhLwplSZTIJST",
	"99+9JI8fP35uFrKkWkPmiKx3VfXs4Zps99H+KKMa/OcurdF8LiTlWVK1f//dS5z/yC1waCuqFMQPy4H5",
	"Qg5f9S3Ad4yQEOMa5rgPDeo3PSKHov55CjMhYeCe2MZXuinh/De6KynV6aIQjOvIvhD8SuznKA8Lum/i",
	"YRUAjfaFwZQ0g/76IHn+4ePD8cMHn/7t14PkH+7Pp48/DVz+y2rcLRiINkxLKYGn62QugeJpWVDexcd7",
	"Rw9qIco8Iwt6hptPl8jqXV9i+lrWeUbz0tAJS6U4yOdCEerIKIMZLXNN/MSk5LlhU2Y0R+2EKVJIccYy",
	"yMaG+54vWLogKVV2CGxHzlmeGxosFWR9tBZf3YbD9ClEiYHrQvjABX25yKjXtQUTsEJukKS5UJBoseV6",
	"8jcO5RkJL5T6rlK7XVbkeAEEJzcf7GWLuOOGpvN8TTTua0aoIpT4q2lM2IysRUnOcXNydor93WoM1pbE",
	"IA03p3GPmsPbh74OMiLImwqRA+WIPH/uuijjMzYvJShyvgC9cHeeBFUIroCI6T8h1Wbb//vop7dESPIG",
	"lKJzeEfTUwI8FRlkE3I4I1zogDQcLSEOTc++dTi4Ypf8P5UwNLFU84Kmp/EbPWdLFlnVG7piy3JJeLmc",
	"gjRb6q8QLYgEXUreB5AdcQspLumqO+mxLHmK+19P25DlDLUxVeR0jQhb0tU3D8YOHEVonpMCeMb4nOgV",
	"75XjzNzbwUukKHk2QMzRZk+Di1UVkLIZg4xUo2yAxE2zDR7Gd4OnFr4CcPwgveBUs2wBh8MqQjPmdJsv",
	"pKBzCEhmQn52zA2/anEKvCJ0Ml3jp0LCGROlqjr1wIhTb5bAudCQFBJmLEJjRw4dhsHYNo4DL50MlAqu",
	"KeOQGeaMQAsNlln1whRMuPm9073Fp1TBsyd9d3z9deDuz0R71zfu+KDdxkaJPZKRq9N8dQc2Llk1+g94",
	"H4ZzKzZP7M+djWTzY3PbzFiON9E/zf55NJQKmUADEf5uUmzOqS4l7J/w++YvkpAjTXlGZWZ+Wdqf3pS5",
	"Zkdsbn7K7U+vxZylR2zeg8wK1uiDC7st7T9mvDg71qvou+K1EKdlES4obTxcp2ty+Kpvk+2YuxLmQfXa",
	"DR8exyv/GNm1h15VG9kDZC/uCmoansJagoGWpjP8ZzVDeqIz+Yf5pyhy01sXsxhqDR27KxnVB06tcFAU",
	"OUupQeJ799l8NUwA7EOC1i328ELd/xiAWEhRgNTMDkqLIslFSvNEaapxpH+XMBvtj/5tr9a/7Nnuai+Y",
	"/LXpdYSdjMhqxaCEFsUOY7wzoo/awCwMg8ZPyCYs20OhiXG7iYaUmGHBOZxRrif1k6XBD6oD/Kubqca3",
	"lXYsvltPsF6EE9twCspKwLbhHUUC1BNEK0G0okA6z8W0+uHuQVHUGMTvB0Vh8YHSIzAUzGDFlFb3cPm0",
	"PknhPIevJuT7cGwUxQXP1+ZysKKGuRtm7tZyt1ilW3JrqEe8owhup5ATszUeDUbMvwqKw2fFQuRG6tlK",
	"K6bxD65tSGbm90Gdvw4SC3HbT1z40HKYs28c/CV43NxtUU6XcJy6Z0IO2n0vRjZmlDjBXIhWNu6nHXcD",
	"HisUnktaWADdF3uXMo6PNNvIwnpJbjqQ0UVhDs5wQGsI1YXP2tbzEIUESaEFw4tcpKc/ULW4gjM/9WN1",
	"jx9OQxZAM5BkQdViMopJGeHxqkcbcsRMQ3zgk2kw1aRa4lUtb8vSMqppsDQHb1wssajHfsj0QEbeLj/h",
	"f2hOzGdztg3rt8NOyDEyMGWPszMyZOa1bx8IdibTALUQgiztA5+YV/dOUL6sJ4/v06A9+tbqFNwOuUXg",
	"DonVlR+DF2IVg+GFWHWOgFiBugr6MOOgGKlhqQbA98pBJnD/HfqolHTdRTKOPQTJZoFGdFV4Gnh445tZ",
	"auXswVTIi3GfFlvhpFY5E2pGDZjvuIUkbFoWiSPFiNrKNmgNVFv5NjON9vAxjDWwcKTpZ8CCMqNeBRaa",
	"A101FsSyYDlcAekvokx/ShU8fkSOfjh4+vDRb4+ePjMkWUgxl3RJpmsNitx1bzOi9DqHe92V4euozHV8",
	"9GdPvKKyOW5sHCVKmcKSFt2hrALUikC2GTHtulhrohlXXQE45HAeg+HkFu3E6vYNaK+YMhLWcnolm9GH",
	"sKyeJSMOkgy2EtOuy6unWYdLlGtZXsVTFqQUMqJfwyOmRSry5AykYiJiTXnnWhDXwou3Rft3Cy05p4qY",
	"uVH1W3IUKCKUpVd8ON+3Qx+veI2bjZzfrjeyOjfvkH1pIt9rEhUpQCZ6xUkG03LeeAnNpFgSSjLsiHf0",
	"96CP1jxFrdpVEGn/M23JOKr41ZqnwZvNbFQO2byxCZd/m7Wx4vVzdqo7KgKOQcdr/IzP+leQa3rl8kt7",
	"ghjsL/1GWmBJZhriK/g1my90IGC+k0LMrh7G2CwxQPGDFc9z06crpL8VGZjFluoKLuN6sJrWzZ6GFE6n",
	"otSEEi4yQI1KqeLXdI/lHk2GaOnU4c2vF1binoIhpJSWZrVlQdCO1+EcdceEppZ6E0SN6rFiVOYn28pO",
	"Z63CuQSamVc9cCKmzlTgjBi4SIpGSO0vOickRM5SA65CihSUgixxKoqtoPl2lonoDXhCwBHgahaiBJlR",
	"eWlgT8+2wnkK6wRN5orc/fEXde8G4NVC03wLYrFNDL3Vg8/Zg7pQD5t+E8G1Jw/Jjkognuea16VhEDlo",
	"6EPhTjjp3b82RJ1dvDxazkCiZeazUryf5HIEVIH6men9stCWRY8jmHvoHLMl6u045UJBKnimooPlVOlk",
	"G1s2jRqvMbOCgBPGODEO3COUvKZKW2si4xkqQex1gvNYAcVM0Q9wr0BqRv7Fy6LdsVNzD3JVqkowVWVR",
	"CKkhi62Bw2rDXG9hVc0lZsHYlfSrBSkVbBu5D0vB+A5ZdiUWQVRXSndnbu8uDlXT5p5fR1HZAKJGxCZA",
	"jnyrALuhM0wPIEzViLaEw1SLcioPnPFIaVEUhlvopORVvz40HdnWB/rnum2XuKiu7+1MgEIfHNfeQX5u",
	"MWvdoBbUPKFxZLKkp0b2wAexNXt2YTaHMVGMp5BsonxzLI9Mq/AIbD2kZTGXNIMkg5yuu4P+bD8T+3nT",
	"ALjj9cNHaEisP0t802tK9u4DG4YWOJ6KCY8Ev5DUHEHz8qgJxPXeMnIGOHaMOTk6ulMNhXNFt8iPh8u2",
	"Wx0ZEW/DM6HNjltyQIgdQx8Cbw8aqpEvjgnsnNTPsvYUfwflJqjEiN0nWYPqW0I9/k4L6FGmOU/h4Li0",
	"uHuLAUe5Zi8X28JG+k5sj2bvHZWapazAp86PsL7yl197gqi9iWSgKcshI8EH+woswv7EOmK0x7zYS3CQ",
	"EqYLfkcLE1lOzhRKPE3gT2GNT+531sPvOPALvIKnbGRUcz1RThBQ7zdkJPCwCaxoqvO1kdP0AtbkHCQQ",
	"VU6XTGvrudt86WpRJOEAUQX3hhmdNcd6x/kdGGJeOsKhguV1t2I8sk+CzfAdt94FDXS4p0AhRD5AedRB",
	"RhSCQYZ/Ugiz68w5EXs3Uk9JDSAd00ZTXnX731ENNOMKyN9FSVLK8cVVaqhEGiFRTkD50cxgJLBqTmfi",
	"rzEEOSzBPiTxy/377YXfv+/2nCkyg3PveW8attFx/z6qcd4JpRuH6wpUhea4HUauD9T8473nnBdaPGW7",
	"idmNPGQn37UGr8wF5kwp5QjXLP/SDKB1MldD1h7SyDDzOo47SKkfDB1bN+77EVuW+VVtuF7xZC5FWcTY",
	"kHOl9O7r5lIHat4VAZjY2UrR50YwtsC5iIUh90O9nGD135tR+7T241Hvw8s8Sc/qhxc+Jlpe+JOoiINh",
	"BYkq0xQg6mIbe9JUi21FG9bxI25Acy2X0voYEZrqkuaNXR3Hgg2aFFRtU736NtQDVfC4o0Yw6G6jqvbC",
	"UpqmGj6POrseOgZld+LA/6j+2OeCZJ6i+foKJAI7EJFQSFDIv0MVjrJfxSwMA3IMXq2VhmVXy227/tbz",
	"Bnzf+5YSPGcckqXgsI5GvjIOb/BjrLe9Q3o6423e17ctoDfgb4HVnGcINV4Wv7jbAdt4V/neXcHmt8dt",
	"GTjCAChU4EFeEErSnKF6T3ClZZnqE05RgRActoiPgn8q9auUXvomcR1WRMXkhjrhFP1TKrVC1K46g8gb",
	"+jsAr1lS5XwOqsXqyAzghLtWjJOSM41zLc1+JXbDCpDoKDCxLZd0TWY0Rw3YHyAFmZa6yT4xCENplufO",
	"2mKmIWJ2wqkmOZjn5RvGj1c4nLdWeprhoM+FPK2wEOf2c+CgmErivhTf26/o5uaWv3Aubxg0az9b/bwZ",
	"v47UWKN+oQ4E/b93/2v/14PkHzT540Hy/D/2Pnx88une/c6Pjz59883/a/70+NM39/7r32M75WGPhQg4",
	"yA9fuXfL4SsUTmsFfQf2a1POLhlPokQWmqFbtEXuYjicI6B7TdWFXsAJ1ytuCOmM5iyj+mLk0GZxnbNo",
	"T0eLahob0VJV+LXuKPJdgsuQCJNpscYLX+Nd96N4MA5ajFx8DZ6XWcntVpbKWa3Q19y7gYjZuAq4srkY",
	"9glG4yyo92Fyfz56+mw0rqNoqu+j8ch9/RChZJatooIcrGKSvDsgeDDuKFLQtYIeWRFhj3q8WMN7OOwS",
	"zBNQLVhx/ZxCaTaNczjvwes0Ait+yK1rrTk/aH9aO7W2mF0/3FoakbnQi1iMdkNSwFb1bgK0fAIKKc6A",
	"jwmbwKT9Is/moLzvTQ50hrHCaEMRQyISqnNgCc1TRYD1cCGDnr0x+kHh1nHrT+ORu/zVlcvjbuAYXO05",
	"K2OT/1sLcuf7b4/JnmOY6o4N27NDB4FWkSemiyVoeIsYbmYzU9i4xRN+wl/BjHFmvu+f8IxqujeliqVq",
	"r1QgX9Cc8hQmc0H2fXjCK6rpCe9IWr3JY4LAEFKU05yl5DSUiGvytAkBuiOcnPxK87k4OfnQMZx35Vc3",
	"VZS/2AmSc6YXotSJC2dOJJxTGTNMqCqcFUe2+Qo2zTombmzLil24tBs/zvNoUah2WFt3+UWRm+UHZKhc",
	"0JbZMqK0kF4WMQKKhQb3961wF4Ok517fUCpQ5PclLX5lXH8gyUn54MFjII04r9/dlW9ocl3AYK1Db9hd",
	"W9WAC7fvGlhpSZOCzmMGkJOTXzXQAncf5eUlPrLznGC3RnyZ95/FoeoFeHz0b4CFY+dYGVzcke3lU9fE",
	"l4CfcAuxjRE3aqvsRfcriDi78Ha1otY6u1TqRWLOdnRVypC435kqo8XcCFneVK7YHN0RXfKPKZB0Aemp",
	"y8oAy0Kvx43u3hvDCZqedTBl83XYeBGMGEf18RRIWWTUieKUr9uhuwq09v6Q7+EU1seiDjjfJVa3GTqq",
	"+g4qUmogXRpiDY+tG6O9+c7lB1VZReEjMDEUx5PFfkUXvk//QbYi7xUc4hhRNEIb+xBBZQQRlvh7UHCB",
	"hZrxLkX6seWZV8bU3nyR3B2e9xPXpH48Oe+ccDUYsWm/LwGT/4hzRabUyO3C5a2x4ZEBFysVnUOPhBxq",
	"8AcGITa0/jjItnsvetOJWftC69w3UZBt48SsOUopYL4YUsHHTMsny89kjURWgUowHZ1D2DRHMalyXrNM",
	"h8qGJcXm1+oDLU7AIHktcHgwmhgJJZsFVT6lDmYe8md5kAzwGcN9NyV5CHXvQXqhKoWD57ntc9p5XbpU",
	"Dz6/g0/qED4tByRoMBI+ejDHtkNwFIAyyGFuF24be0KpQ4/rDTJw/DSb5YwDSWKeSVQpkTKbE6m+Ztwc",
	"YOTj+4RYFTAZPEKMjAOw0fiJA5O3IjybfL4LkNyFTlM/NppNg78hHuVhfXWNyCMKw8JZj60n9RyAOne2",
	"6v5qOVXiMITxMTFs7ozmhs25F189SCfXAIqtrcwCzvx+r0+c3aCBtxfLTmuyV9FFVhPKTB7ouEC3AeKp",
	"WCU2zCsq8U5XU0PvUfdlDDqLHUyb1eGOIlOxQpcOvFqsu+wWWPrh8GAEL/wVU0iv2K/vNrfAbJp2szQV",
	"o0KFJOPUeRW59IkTQ6bukWD6yOVukKjhQgC0lB111lP3+N36SG2KJ93LvL7VxnUCIh8ZEjv+fUcouks9",
	"+OtqYarUCu/aEktUT9H0TGhmlQhEyBjRGzbRNdJ0TUEKcsBHQdIQopLTmOnOvG0Ab5wj3y1QXmDuCsrX",
	"9wJ3FwlzpjTUSnRzMXur0HWrJymmzBJi1r86XciZWd97IapryuZkwY6NZV77CtBddMak0glaIKJLMI2+",
	"U/io/s40jctKTYcam2CSZXHegNOewjrJWF7G6dXN++MrM+3biiWqcor8lnHryDHFhKhRN7sNU1tPzI0L",
	"fm0X/Jpe2XqHnQbT1EwsDbk05/hKzkWL825iBxECjBFHd9d6UbqBQQbRkV3uGMhN9nBidORkk/a1c5gy",
	"P/ZWtxEfo9l3R9mRomsJFAYbV8HQTGTEEqaDfKLdsMWeM0CLgmWrli7Ujtr7YqY7KTx8FqYWFnB33WBb",
	"MBDoPWORExJUM+FWLeDbzLCNfBeTQZg5bqbFChlCOBVTPq95F1FVZNU2XB0DzX+E9S+mLS5n9Gk8upzq",
	"NIZrN+IWXL+rtjeKZzTNW1VawxKyI8ppUUhxRvPEKZj7SFOKM0ea2Nzro6+Z1cXVmMffHrx+58D/NB6l",
	"OVCZVKJC76qwXfHVrMrm9uo5ID5vsnnzeZndipLB5lcJiUKl9PkCXALaQBrtZMqrDQ7BUXRK6lncQ2ir",
	"ytnZRuwSN9hIoKhMJLX6zlpImlYRekZZ7vVmHtoebx5c3LB0i1GuEA5waetKYCRLrpTddE53/HTU1LWF",
	"J4VzbUiRu7RZoBURvG1CR1/gdeGs7kuKee6sVqTLnHi5RE1ConKWxnWsfKoMcXBrOzONCTbuEUbNiCXr",
	"McXykgVjmWZqwEO3BWQwRxSZPmdiH+6mwlX4KDn7VwmEZcC1+STxVLYOKiYWdNr27nVqZIfuXG5gq6Gv",
	"h7+MjBHmeGzfeAjEZgEjtNR1wH1VPZn9QiuNFHpG1yaJHQz+4YydK3GDsd7Rh6Nm67y4aFrcwoIcXf5n",
	"CMNmZt5eDcQ/Xl2yyZ45otU9mEpmUvwB8XcePo8jUSk+qyVDL5c/YIibea3dqYuU1LP3bnefdBNqoZpO",
	"Cj1UjzsfmOUwvZ7XUFNut9om22/4usUJJvQq3bPj1wTjYO544ub0fEpjuQeNkGFgOqgNwA1duhbEd/a4",
	"V1UMgp2dBLbkqi2zAccFyDpgrJu85IICg512sKhQSwZItaFMMLb2v1yJyDAlP6fc1mww/exRcr0VWOWX",
	"6XUuJKYLUHG1fwYpW9I8LjlkaVfFm7E5s+UISgVBvns3kC31YqnI1QywJvYaNYcz8mAcFN1wu5GxM6bY",
	"NAds8dC2mFKFnLxSRFVdzPKA64XC5o8GNF+UPJOQ6YWyiFWCVEIdPm8q49UU9DkAJw+w3cPn5C6a7RQ7",
	"g3sGi+5+Hu0/fI5KV/vHg9gF4MpJbOImGbKT/3HsJE7HaLe0YxjG7UadRCOrbT2pfsa14TTZrkPOErZ0",
	"vG77WVpSTucQ9xRZboHJ9sXdREVaCy88s8VQlJZiTZiOzw+aGv7U431u2J8Fg6RiuWR66Yw7SiwNPdXJ",
	"7O2kfjhbWcXlIfVw+Y9oIy28iaj1iLxepam932KrRkv2W7qEJlrHhNocETmrvRd8dmRy6FPQYGLWKh+r",
	"xY2ZyywdxRx0ZpiRQjKu8WFR6lnyN5IuqKSpYX+TPnCT6bMnkWS0zaSIfDfArx3vEhTIszjqZQ/ZexnC",
	"9SV3ueDJ0nCU7F4d7RGcyl5jbtxs12c73Dz0UKHMjJL0klvZIDcacOpLER7fMOAlSbFaz070uPPKrp0y",
	"SxknD1qaHfr5/WsnZSyFjOWVq4+7kzgkaMngDH334ptkxrzkXsh80C5cBvqbtTx4kTMQy/xZjj0EXojI",
	"69QnSK406c5XPaId6Dum5oMhg6kbakyayWiv3+jnlc9d45P54mHFP9rA3vCWIpL9Cno2MUiUHd3OrPoe",
	"2L8peSFWQze1dUL8xn4BqImipGR59ksdldnKQy4pTxdRe9bUdPytrphULc7eT9H0bQvKOeTR4aws+JuX",
	"GSNS7T/F0HmWjA9s206NbpfbWlwNeBNMD5Sf0KCX6dxMEGK1GfBWOVTnc5ERnKfOFVZzz25K/SDx8b9K",
	"UDoWPIQfrFMX6i3Ne9fm3SXAM3wtTsj3tijqAkgjEwy+0qqAf5cF1irUyyIXNBsTM87xtweviZ3V9rF1",
	"P2ze3zk+UpqraOmrgjSIw9yDfQmPeOjC8HE2+1KbVSuNiZmUpssiFhxqWhz7BhiBGurw8fkSYmdCXgXl",
	"DW0cqRnC0MOMyaV5cVWjWdkFacL8R2uaLvBJ1mCp/SQ/PGG1p0oVFImrir1UuQHx3Bm4Xc5qm7J6TIR5",
	"N58zZWthwhk041Gr4GynEvDxqc3lyZJzSylR2WNT8oCLoN0DZx01vJo/ClkL8TsK5Dbf+675u4+wVzRX",
	"UTsZeKc6nI1urIp4+BrHKeWCsxQzBcWuZlc0c4gNbEBSpbaS1R9xd0Ijhyuagrxyk3NY7E1K7hmhQ1xX",
	"CR98NZtqqcP+qbE644JqMgetHGeDbOwz6Ts9IOMKXK5HLLEa8EkhG3ZF5JBRU3VSmTR2JCMMi+l52H1n",
	"vr11z370Fz9lHAV8hzbnmm41dVjTT5tXAdNkLkC59TRjg9Wvps8Ew2QzWH2Y+BqAOIY1y5llWxt0d6gD",
	"b5F2FmDT9qVpa1OZ1D83PJDtpAdF4Sbtr7MQlQf0ivciOGJZTLxpJ0BuNX442gZy2+hKgvepITQ4Q0M0",
	"FHgPdwijqjnQqmdjhFZLUdiCWBeuaAYDxiNgvGYc6gqVkQsijV4JuDF4Xnv6qVRSbUXAQTztGGiO1ucY",
	"Q1PamR4uO1RrgxEluEY/R/821uUSehhH1aAW3ChfV4UxDXUHwsRLrMjrENktfoBSlROiMowoaJVDiDEO",
	"w7h9wZXmBdA9Bl2ZyHbXktqTs8tN1BckOi2zOeiEZlksedQL/Erwq88DBStIyypHY1GQFHOiNJPEdKnN",
	"TZQKrsrlhrl8g0tOF9QXiVBDWOPE7zAGoUzX+G8sQWH/zjgnjJ3dAL3HhSvIsKPc3BypI/Uamk4UmyfD",
	"MYF3yuXRUU99MUKv+18ppedi3gTkmlNDbOJy4R7F+Nu35uIIMyd0sm7aq6VKbIBOd8JXhcNnYxWS2+RK",
	"eJV10nCisaeqOrVZAdFfP2qMl1+P622QEIPa+9VaD/sccNNef3GqXeSapmQjC+qNBrLeOzbuB6GIa077",
	"PHasw4753Ok9TDLsyNk49kaEelewLkA/ej9TUlDmTOM1s+hi1nmk96sLNx26eoPbi3B+3r0aux/P+nyy",
	"iWJ8ngPB7+2KO6fgwtmrkut2rd4ryT8J7a+u4qkdr/KKj66/652AU92sGrRXaXvssrvbZbo3+Y+/WB82",
	"AlzL9Regwu1seqdeUVfateqpugmpMgMPyhTcuBXjpYf68x/VOY+QngqhWJ2NOlaTaKCv2zGWFQryN3XH",
	"8o4mZ5BqTEFeG9AlwC7ZnMxkQb272zxIPW/HyiXQpT/alPOom3d8y4XWCUsKQutszubJ8Aw/B5WbFDIl",
	"TFc7B+5KzjUDDga7Pc9mkGp2tiUM7H8WwIMQo7FXQtjSsUFUGKvcaDGLyO4qthqgTVFaG+EJsvldGpy+",
	"IJBTWN9RpEEN0STSY3+vXCSBBGIAuUNiSESomBuC1Zo6yzBTFWUgFrzbj+0OdSqu3vIzQVDjBefyJGlu",
	"3DrQccOU8foXg+YyXXcK/0WP0L5IsW7+/H5h+xWWK1BVaTifgCJ8kpLDbpq+c5fAAoP2KkOBT2UByv/m",
	"I3TtLDk7hbBADpplzqnMfIuonsGrMJIN91EnvMvnfm8DPatmZrWTZjegJ5L4CV1x01wY+Svp82du+kWG",
	"deTR+8Pm50aPTwPXDKQrJIbCXi4UJFp4p85NcGxChat5fhEkqN5kixa43hQo7+scL5h0lmLKE+o8W8IF",
	"EglLaqCTQSaW/jk3Iful/e4jWHzS0a3qlIpek62pVLx7LlMdJIZUPyPuttweGXMRzQrj3JYtVbG0LNyg",
	"MlT9F1JkZWov6PBgVNqnwUmPNrCSqFIi7a6y877MMQXY6yDO8BTWe1b0TxeU17nYmsfailB2DUFcf2u3",
	"r1TpFH9f53O7gPmVwHmTipvxqBAiT3p0/Yfd7DLtM3DK0lPIiLk7vGNbTwUPchdVzJUx93yx9tlUigI4",
	"ZPcmhBxw60rs7brN9MatyfkdvWn+Fc6alTbhk9MpTU543CcTUzHJS/I3P8xmrqbAML9LTmUH2ZK7ZNWT",
	"2UbS80g9m8nQR2nX0tquMVITlYUiJqVsrTcRsSP7Hr4gho9Z0WLJ0m4dhY4wMcPSTAmNDH5YsfBxo3Ae",
	"a9XZ8FmGbKGGlFoRzjwfKMtLCRHlcrglrePnOvUXxY+DFT2PFiK7RLLlsPWU9E4sXtVQ3BuIzlhW0oYN",
	"Q12q5MjAGuEhtIPJa2fKii+wQ1dYQITPkyoXWkwP6KIx/DYa/lYXMWnJF0wRN2adX62nqmGFh8vc5b3I",
	"jeP2YjkoBtFEVyUcOTZB1ZLNioswRU3t+yqtZQEfOv7ktbf0TX0ih9VP8R22gBfqs4IKKl6QcODcsIPq",
	"mwopwVJ6KaGx/G0qMrfAmoUFW6Qwosks0yYMs85NzX0J9J/qZaVW7KtA1NY+Yj4awTFHV1drqdDShKm+",
	"Q8Ix/Fue0fz6NY+YqOgA8eEqpsYXGqquQiRbVKqLeYm9poPmDtRUVzc1f4ea0v8Bs0dRE6EbypkMqso1",
	"3rCCLJPmJBd1rTQckpzjmNam+PAZmboIl0JCyhRrBf+d+yzElaYGk/LXhXQ3q4a2rfMXoS9Bxu5tLwry",
	"ts5oqgXeGDWE9RG9YabSc3KjVB6jvg5ZRPAX41Fhqokt18Vpw9hoM0S3vOiEhCs2OgbuQzsaHbtJNIYu",
	"zxrWzKVTKuiuc/Bt3cBt5KKu1zbUYt5F7qa0l0MM3fFstqY7WtotQjAVNEFQye8PfycSZljrRZD793GC",
	"+/fHrunvj5qfzXG+fz9esPe6bOwWR24MN2+MYn7p87q2nsU9Dv6t/ShZnm0jjEa4Rl0tCQMSfnMBWzdS",
	"r+k3awrpHlVXM2MX7572JiBiImttTB5MFQRiDIjBcN0iEReoVEhLyfQa88h4zTn7LeoN8H1lbHPG2irz",
	"gLv7tDiFKhNRbZorlb9dvxc0x/vIyNToW6WxSOu3K7oscnAH5Zs70/+Ex397kj14/PA/p3978PRBCk+e",
	"Pn/wgD5/Qh8+f/wQHv3t6ZMH8HD27Pn0UfboyaPpk0dPnj19nj5+8nD65Nnz/7xj+JAB2QI68lHLo//F",
	"ombJwbvD5NgAW+OEFqyqzWzI2FdmoSmeRFhSlo/2/U//x5+wSSqW9fD+15ELihwttC7U/t7e+fn5JOyy",
	"N0ddfKJFmS72/DzdmrjvDqvAFvu0xB21MQuGFHBTHSkc4Lf33x4dk4N3h5Og0OT+6MHkweQh1iEsgNOC",
	"jfZHj/EnPD0L3Pc9R2yj/Y+fxqO9BdAcTdfmjyVoyVL/SZ3T+RzkxJWoMT+dPdrzosTeR2eH+GRGnccy",
	"7NgQnSAuo1u5xdk00c/RhuA0MqErl5h7XOXHd5oLnmHkhFXtG9ZWIeswqxPBHtaMyqfDsfkB93+NFO6b",
	"sbl5Rzdqh7aqkpqX938f/fSWCEnck+YdTU8rrxNyOLOpDaQ4Y+iQnwVRHKbnxNPsv0qQ65qmHLcLc9/5",
	"dOcuzGGp5kXTJ7iWpGKlqWNVcnBmQwoBMVdWw5pZaVlCCEnNeg07fZA8//Dx6d8+jQYAgiZsBZgZ4Xea",
	"57+Tc4bFVtAO6HMLudwR40hqb5Sgx7UVCjvUOzlGp+bqa1i9pWrTDKX5nQsOv/dtgwMsug80z01DwSG2",
	"Bx8wdh+JBc/ZowcPrqzsUxU9Zl2jq1E8SVxgoC4Tsp8ilVx99aeeMq5PrnChTd/PSy+3PVxn0S9ohhU1",
	"QGm7lIdf7VIOOXqRmEuB2Evv03j09Cvem0NueA7NCbYMEuN0L5qf+SkX59y3NAJPuVxSuUZxJij704pM",
	"pXOFBglkkfZsNwp9jD586r319sI6BnsfG44I2aXuxE4Jl8NXW67JO6qPc3bTSrbKJJjvVRZ8NFW7WhCY",
	"l1/dm5Dvw97IvTFLg82BUEpeF9L3t16Vdsons6phu6PCBBbRSztQEd/e3zd9fx80FRyN1IUxYBqnYCNM",
	"HWemy16g3QCkViG8CxWaCwoWXCDt82etxtN6X9qZPsSef1sZ9S3uenDXJyYF8FYSU7PQxOdnzd7hv7pJ",
	"GlfGZ2TcX7nQ94bmhk6C5baCoW0+z1th8C8jDFb+rbaerU9hfTnxEIvZ7H30OVqvQCR0OWoHCIPhszro",
	"G+QQvdtiJ/cmNuFq2OZiPMM5tG4V8zBz7q2A9wUIeN2s1DEw6lzDNyfUIQyLOm31LsVoG1Wmdkqv/ZVK",
	"cX9hZPWKbQbS7QLbBdhnRxhzzPqzsdU/pRDmkHYrfv2lxa8qzORSAlgjr7wLXArMWJfS3rW1c0xXklgz",
	"1CjgbFUVX3eEx3UNHMNiMC2Rz0ihxv5liCZU+2i0mzXuvBu7Itb3ED5QX6wPX22Trr4iPc/g9HiRWyC+",
	"N5+bl0bNDu+vx+wwjDc9efDk+iAId+Gt0OQ7vMU/M4f8rCwtTla7srBNHGlvahP3buJKvMWWkFHUCXkD",
	"HoV1D8Kkv9Yj466rNhkmUrg3IT49sKqKHbjw/bmgeZ2miMq57WR4nEECueP/3Mfx70zIdxgVoNUYHcu0",
	"y4RP7jCu9x8+evzENZH03PpttdtNnz3ZP/jmG9esTgZt3zed5krL/QXkuXAd3N3QHdd82P/fv/9jMpnc",
	"2cpOxerF+q3NvPal8NRxLJ6g2vi+3frKNyn2SncZ8bai7lrM9i/EKsr9xer29rmx28dg/09x60ybZOQe",
	"oJUGsxGufoW3kD0mu9xDY59c2fCd6jKZkLfCZQ4pcyqJkBlIVx1mXlJJuQbIJp5SMXJN2UwJac6Aa/Ng",
	"xHoXMlEsAxtwPS8lZCRnSywIK+EM/eFxenzLNyDYzujRa/aLZfJv6Cqs5F9d01q4JaO6c0lXvuIO1pQQ",
	"En/65hvyYFy/WvLcDJBUiIkx1yVdja5R21cR2yBf82ZS/K3OuDj2EM1RLf3Y4ma0mYH7r825v1qJ3ZK7",
	"29gr4pw7G3xqg06oP3D5OTZqDqxgZ+vxYIGYdR3Sa6Q8L0LFWZyZYahS4Au2DWxVSUcfn2303h7i28f/",
	"pVhJm6B2ZBsYYar2PqItI+QZnXOLEXJ/LTNpYDOSYumNRoLMQKcLF5zbQn2EPfmU/P28aVNBxquWanAX",
	"uxmhw/SIWChwYL6NIG4SDXcgI0T8k8+Oaz6zGeaJqMot+LqjaJJivhRXVYXL1Spkyvvx+xhes4s7Qfmy",
	"nrwrkCFarsLueYvg3RDcYY7f+pJPiDG3iD+Dp79/SibkrahDxF21gT+jyfFz3uyfe0FvBQdrWzeSr6XF",
	"WzNqJXagCh+R4nOD2PdLlff5wiLIni9etlEO+cGWDtsoiwy5vc1kX+UV/kO0LHDjljFrm2xNfFCPNoQ5",
	"m4Y2RXMzOfMNvmJuhJ9+gU+bm+BY18Ni8JB6PuPEAn61TAfT7Vhi3qvy8vZxoHiq88HcSIvK/SyanXwK",
	"ueBz9WWyok3UEcdLhEqqJPDxTO9/vbP7EjP5mCev9Xx0uZ0U4ynY4ny+PrtLvGYh/Nv1QajZ0qey5GHM",
	"6g1zl6cPHl/f9Ecgz1gK5BiWhZBUsnxNfuZVIcXLcDvMY1/lWvPa4GjpArQ2NXOApWHCooszwYbL2ke9",
	"Ytmn7cwwyNi3Ix9kPOCDYX5BWhRA5cUZ4HbT1XFrxsNXoVdwI716lT0rAopB0Y6O8f8xGqh3wnB3MXOX",
	"X8ktoD7Tl2MTzmVXzMaVc4yRAsRsn5zw+0Qt6NOHj3579PSZ//PR02c9mjMzj0vQ09Wd1QOZz3aYIQq0",
	"r1odeLVSe4Xf/eve7d02cTxi2SqabrkuqdJJOevEsjuKFHTdm6W92FISJhy2Lg9z/YkNlWbTRfR95Z8/",
	"VdHYQ/6iegXb7HuuksptKZieoImAzxhCq2vCVFjfXB5mgzTZIsuqDsd1P07r4AJ70Xnkydadc6OCrr6p",
	"R2qCb1TgXrBpouXmZEpMCT4OzN1VGW70XSmLQkhdnW41GSTuQZ/ZriHt9RHuTsJcSnW6KIu9j/gfzOb1",
	"qQ44sIUvAzuf+92WqN+zVvxNct6RbXHJO7ElUFvfAdlkTj6xnPMsEDPyhqVSHGCmeXfdqLXSsOxk/3Nd",
	"f9tU/Dx6NQmeMw7JUvBYTrqf8Osb/BjNZS80zfs6H5uPfX1bzLEJfwus5jxDOONl8fuFPMUvpUJqrVaC",
	"OcZ1eTBL/zseNX9o1jztnqQ1T7vHrFGjrOfnvY+NP50Pj2upFqXOxHnQFx+AlhcNMd8HubKH682rN1Er",
	"57QiGShDtF+fkirAQ+zEVF8jmciCjOi9ycj+omqrGeNZi0hQokzFGUhVKTSkd7e51V39eXRXg/d9Jx5r",
	"M29u42ilulqJ5K3IwI7bTHYbCxflIgOXILQriFQyWPy972+lul3rBZbScr7QpCyIFrG3Xt0xoallsraK",
	"odpW9s228hVXzoDQXALN1mQKwImYmkU3y2cSqtBV3j8YnaQZr15Ww1VIkYJSkCU+PHYbaFXaVXxe6g14",
	"QsAR4GoWogSZUXlpYE/PtsJZpSpX5O6Pv6h7NwCvFQU3I9Y66EbQWzkBOWmvC/Ww6TcRXHvykOyoBOJF",
	"A9RviWWRg9NwRVC4E056968NUWcXL48WVAGxz0zxfpLLEVAF6mem98tCWxaJub8j9RXt12O2REmMUy4U",
	"pIJnqr8K6ja2jOVCgrUos4KAE8Y4MQ7c8+B8TZV+74wdYbG4oCyJmWJD2da+lPhm5F+qhPidsVNzH3JV",
	"qiprvlNgxKtrcVhtmOstrKq50Nrkx640JFqQUsG2kfuwFIzvkKXCOqw6MBNh0ZDu4jCnCXUKii4qG0DU",
	"iNgEyJFv1ai3VpswegBhqkZ0VVyxSTlBeSylRVFgybek5FW/PjQd2dYH+ue6bZe4XOEivLczASrUXjnI",
	"zy1mFQZtLKgiDg6ypKdOwTV3OZ8iJb3YEhI0TCebKN8cyyPTKjwCWw9pWcwlzbA+J42oUn62n4n9vGkA",
	"3HFPnlj8OJnCLFqExGx6TcmyV0VUDS1wPBUTHrFWsiKpOYIzrIrjCcT13jJyBj2Fmo+D4pGuOc4V3SI/",
	"Hi7bbnWPWsqMYXbckgNC7Bj6EHh70FCNfHFMYOek1h60p/g7KDdBJUbsPskaVN8S6vF3WkBbmxfeX42L",
	"osXdWww4yjV7udgWNtJ3YmP6w68yqK9ttv2MPmlN/Wnw/ptc5G27d06ZTmZCuvLzdKZBRlR5rZIGlGkf",
	"M2gNKFo4jwmCI7hr043jypjXiTccE7EgEF+pky0jeXzMVN8JOSjwp+neRpkmJdcsD4Kfq5fyl6cvvNUB",
	"3OoAbnUAtzqAWx3ArQ7gVgdwqwO41QHc6gBudQC3OoC/rA7gpiL5Ei9weP9mLnjCYU41O4MqxO82+dCf",
	"KvKluqq8TgK1GOeUaZfKk1AvBuCXywX+aaA54oDlyGMLoXpzJGHhZyVKmQJJDYSMkyKn5mkAK10llmum",
	"LPVJlF3pZ8yCShU8fkSOfjjwDvoL50jebHv3wCUjV3qdwz2XuqGqzepzOAA3SHcpHKi/EnwCOpeOj+VA",
	"lEHvt9j6FZxBLgqQ1veXaFlGND7HQPOXDjdbFD6N0ppmtN/HDT2TQ9uSFkGJe1wrVYTaqI1mZcwZzVV/",
	"aUw73pIWsRxw1cVnVUHITV6IbN06IWbX9nADm2ejdtNnnMp1JESncyI6pKGF4VeOsLq6rE9XHkzSJdou",
	"mW2jsJi0LkFFz/EmKo9GUVQb1hnKBvvMWnQSLR3dDh0YVQAOcYA19Oz3hLy3/W42VB0hckesZuZfjN9g",
	"s2XFNLCteUQ41vO1xpV7xEdPL579sSHsrEyBMK2Ij0fZfr2MR6vEjDQHnjgGlExFtk4a7GvUuIUypqhS",
	"sJxuv4lC/umyHrvLx3zZfE/dzDXyKljcJp4cEs0qcQy4hzuvNQzmzRW2cETHngOMf24W3cdGQxCI408x",
	"pVK71syOTK+eZn3L+G4ZX3AaWxIB4y5+r81EJp+R8cm1LHk/z/t2BWlpgAtP8l3UzqNJDla6YdfMYFrO",
	"55i9uWOjM0sDHI8JfkOs0C53KBfcjYLs4FVGz8smkWoP1+UuQazaXSHJXIqyuGfLVPE1GjOWBeVrb/KF",
	"RLFlmVsc2sR3V8tobYhd1xEAzbFO99en1X7nVX6B7tZdtc3fLVrIOVXE7i9kpOSZixzqBOKu+PDM0Xbo",
	"4xWv2fTG3NF2vZHVuXmHXBF+l12IS2XmLkAmesXtgWqmd7cBv/bkTm6z1v41ro13NuNCD4PtBq/WDOGK",
	"bg8Z8DW8PoIUJXUoXLPWlq0E2Bc4EuYrsS2v1HmkM3zThySow2dtpJAXhPqSAqngSssy1Secoo0mWNik",
	"61/itdH9/O2lbxI3E0aseG6oE04x43xluYnyuRlEzBTfAXg2qsr5HJThlSGRzABOuGvFOCm5eWmJGVmy",
	"VIrEhqGaM2Tkk4ltuaRrMqM5Ghn/ACnI1Nzswa5bhbHSLM+dQ4uZhojZCaea5ECVJm+Y4bJmOJ9LrPLk",
	"An0u5GmFhXj6ijlwUEwlceXL9/YrZohwy/dKPlRY2s91ZPf1pobwsLOsF/LDVwZuislwcqZ07QPRgf3a",
	"7N9LxpMokR0vgDiXsDZtkbuYK8YR0L2mdUgv4ISbG04Lglyd6ouRQ9vM0zmL9nS0qKaxES1rkF/roCfe",
	"lXAZEmEyt6aVP1FgZkAH3nyJG4+1aNp7v6MZZWN5y9hXl1Gsp5F7JID/bE8R3vFmWZCWkuk12iFowX47",
	"BfP/D58+mG/yzJsoSpmP9kcLrYv9vT2sW7kQSu+NPo3Db6r18UO18o/e2lBIdoZprD98+v8BAAD//zBM",
	"YV8ROwEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
