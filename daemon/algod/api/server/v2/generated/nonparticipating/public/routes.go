// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AVZVBzsBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
