// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
