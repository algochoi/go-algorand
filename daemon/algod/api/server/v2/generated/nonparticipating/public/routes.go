// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. WARNING: This endpoint is experimental and under active development. There are no guarantees in terms of functionality or future support.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"MyyH8+HT/w8AAP//uaszgQBIAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
