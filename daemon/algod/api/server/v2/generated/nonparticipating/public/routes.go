// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3PbuJLoX0FptyqPFeW898RVU3udZB7eSTKp2DO754xzZyCyJeGYAngA0JYmN//9",
	"FhoACZKgRNmOncz4U2IRj0aj0Wj08+MoFctCcOBajfY/jgoq6RI0SPyLpqkouU5YZv7KQKWSFZoJPtr3",
	"34jSkvH5aDxi5teC6sVoPOJ0CXUb0388kvCvkknIRvtaljAeqXQBS2oG1uvCtK5GWiVzkbghDuwQh69G",
	"nzZ8oFkmQakulD/xfE0YT/MyA6Il5Yqm5pMi50wviF4wRVxnwjgRHIiYEb1oNCYzBnmmJn6R/ypBroNV",
	"usn7l/SpBjGRIocunC/Fcso4eKigAqraEKIFyWCGjRZUEzODgdU31IIooDJdkJmQW0C1QITwAi+Xo/1f",
	"Rwp4BhJ3KwV2hv+dSYA/INFUzkGPPoxji5tpkIlmy8jSDh32Jagy14pgW1zjnJ0BJ6bXhLwplSZTIJST",
	"99+9JI8fP35uFrKkWkPmiKx3VfXs4Zps99H+KKMa/OcurdF8LiTlWVK1f//dS5z/yC1waCuqFMQPy4H5",
	"Qg5f9S3Ad4yQEOMa5rgPDeo3PSKHov55CjMhYeCe2MZXuinh/De6KynV6aIQjOvIvhD8SuznKA8Lum/i",
	"YRUAjfaFwZQ0g/76IHn+4ePD8cMHn/7t14PkH+7Pp48/DVz+y2rcLRiINkxLKYGn62QugeJpWVDexcd7",
	"Rw9qIco8Iwt6hptPl8jqXV9i+lrWeUbz0tAJS6U4yOdCEerIKIMZLXNN/MSk5LlhU2Y0R+2EKVJIccYy",
	"yMaG+54vWLogKVV2CGxHzlmeGxosFWR9tBZf3YbD9ClEiYHrQvjABX25yKjXtQUTsEJukKS5UJBoseV6",
	"8jcO5RkJL5T6rlK7XVbkeAEEJzcf7GWLuOOGpvN8TTTua0aoIpT4q2lM2IysRUnOcXNydor93WoM1pbE",
	"IA03p3GPmsPbh74OMiLImwqRA+WIPH/uuijjMzYvJShyvgC9cHeeBFUIroCI6T8h1Wbb//vop7dESPIG",
	"lKJzeEfTUwI8FRlkE3I4I1zogDQcLSEOTc++dTi4Ypf8P5UwNLFU84Kmp/EbPWdLFlnVG7piy3JJeLmc",
	"gjRb6q8QLYgEXUreB5AdcQspLumqO+mxLHmK+19P25DlDLUxVeR0jQhb0tU3D8YOHEVonpMCeMb4nOgV",
	"75XjzNzbwUukKHk2QMzRZk+Di1UVkLIZg4xUo2yAxE2zDR7Gd4OnFr4CcPwgveBUs2wBh8MqQjPmdJsv",
	"pKBzCEhmQn52zA2/anEKvCJ0Ml3jp0LCGROlqjr1wIhTb5bAudCQFBJmLEJjRw4dhsHYNo4DL50MlAqu",
	"KeOQGeaMQAsNlln1whRMuPm9073Fp1TBsyd9d3z9deDuz0R71zfu+KDdxkaJPZKRq9N8dQc2Llk1+g94",
	"H4ZzKzZP7M+djWTzY3PbzFiON9E/zf55NJQKmUADEf5uUmzOqS4l7J/w++YvkpAjTXlGZWZ+Wdqf3pS5",
	"Zkdsbn7K7U+vxZylR2zeg8wK1uiDC7st7T9mvDg71qvou+K1EKdlES4obTxcp2ty+Kpvk+2YuxLmQfXa",
	"DR8exyv/GNm1h15VG9kDZC/uCmoansJagoGWpjP8ZzVDeqIz+Yf5pyhy01sXsxhqDR27KxnVB06tcFAU",
	"OUupQeJ799l8NUwA7EOC1i328ELd/xiAWEhRgNTMDkqLIslFSvNEaapxpH+XMBvtj/5tr9a/7Nnuai+Y",
	"/LXpdYSdjMhqxaCEFsUOY7wzoo/awCwMg8ZPyCYs20OhiXG7iYaUmGHBOZxRrif1k6XBD6oD/Kubqca3",
	"lXYsvltPsF6EE9twCspKwLbhHUUC1BNEK0G0okA6z8W0+uHuQVHUGMTvB0Vh8YHSIzAUzGDFlFb3cPm0",
	"PknhPIevJuT7cGwUxQXP1+ZysKKGuRtm7tZyt1ilW3JrqEe8owhup5ATszUeDUbMvwqKw2fFQuRG6tlK",
	"K6bxD65tSGbm90Gdvw4SC3HbT1z40HKYs28c/CV43NxtUU6XcJy6Z0IO2n0vRjZmlDjBXIhWNu6nHXcD",
	"HisUnktaWADdF3uXMo6PNNvIwnpJbjqQ0UVhDs5wQGsI1YXP2tbzEIUESaEFw4tcpKc/ULW4gjM/9WN1",
	"jx9OQxZAM5BkQdViMopJGeHxqkcbcsRMQ3zgk2kw1aRa4lUtb8vSMqppsDQHb1wssajHfsj0QEbeLj/h",
	"f2hOzGdztg3rt8NOyDEyMGWPszMyZOa1bx8IdibTALUQgiztA5+YV/dOUL6sJ4/v06A9+tbqFNwOuUXg",
	"DonVlR+DF2IVg+GFWHWOgFiBugr6MOOgGKlhqQbA98pBJnD/HfqolHTdRTKOPQTJZoFGdFV4Gnh445tZ",
	"auXswVTIi3GfFlvhpFY5E2pGDZjvuIUkbFoWiSPFiNrKNmgNVFv5NjON9vAxjDWwcKTpZ8CCMqNeBRaa",
	"A101FsSyYDlcAekvokx/ShU8fkSOfjh4+vDRb4+ePjMkWUgxl3RJpmsNitx1bzOi9DqHe92V4euozHV8",
	"9GdPvKKyOW5sHCVKmcKSFt2hrALUikC2GTHtulhrohlXXQE45HAeg+HkFu3E6vYNaK+YMhLWcnolm9GH",
	"sKyeJSMOkgy2EtOuy6unWYdLlGtZXsVTFqQUMqJfwyOmRSry5AykYiJiTXnnWhDXwou3Rft3Cy05p4qY",
	"uVH1W3IUKCKUpVd8ON+3Qx+veI2bjZzfrjeyOjfvkH1pIt9rEhUpQCZ6xUkG03LeeAnNpFgSSjLsiHf0",
	"96CP1jxFrdpVEGn/M23JOKr41ZqnwZvNbFQO2byxCZd/m7Wx4vVzdqo7KgKOQcdr/IzP+leQa3rl8kt7",
	"ghjsL/1GWmBJZhriK/g1my90IGC+k0LMrh7G2CwxQPGDFc9z06crpL8VGZjFluoKLuN6sJrWzZ6GFE6n",
	"otSEEi4yQI1KqeLXdI/lHk2GaOnU4c2vF1binoIhpJSWZrVlQdCO1+EcdceEppZ6E0SN6rFiVOYn28pO",
	"Z63CuQSamVc9cCKmzlTgjBi4SIpGSO0vOickRM5SA65CihSUgixxKoqtoPl2lonoDXhCwBHgahaiBJlR",
	"eWlgT8+2wnkK6wRN5orc/fEXde8G4NVC03wLYrFNDL3Vg8/Zg7pQD5t+E8G1Jw/Jjkognuea16VhEDlo",
	"6EPhTjjp3b82RJ1dvDxazkCiZeazUryf5HIEVIH6men9stCWRY8jmHvoHLMl6u045UJBKnimooPlVOlk",
	"G1s2jRqvMbOCgBPGODEO3COUvKZKW2si4xkqQex1gvNYAcVM0Q9wr0BqRv7Fy6LdsVNzD3JVqkowVWVR",
	"CKkhi62Bw2rDXG9hVc0lZsHYlfSrBSkVbBu5D0vB+A5ZdiUWQVRXSndnbu8uDlXT5p5fR1HZAKJGxCZA",
	"jnyrALuhM0wPIEzViLaEw1SLcioPnPFIaVEUhlvopORVvz40HdnWB/rnum2XuKiu7+1MgEIfHNfeQX5u",
	"MWvdoBbUPKFxZLKkp0b2wAexNXt2YTaHMVGMp5BsonxzLI9Mq/AIbD2kZTGXNIMkg5yuu4P+bD8T+3nT",
	"ALjj9cNHaEisP0t802tK9u4DG4YWOJ6KCY8Ev5DUHEHz8qgJxPXeMnIGOHaMOTk6ulMNhXNFt8iPh8u2",
	"Wx0ZEW/DM6HNjltyQIgdQx8Cbw8aqpEvjgnsnNTPsvYUfwflJqjEiN0nWYPqW0I9/k4L6FGmOU/h4Li0",
	"uHuLAUe5Zi8X28JG+k5sj2bvHZWapazAp86PsL7yl197gqi9iWSgKcshI8EH+woswv7EOmK0x7zYS3CQ",
	"EqYLfkcLE1lOzhRKPE3gT2GNT+531sPvOPALvIKnbGRUcz1RThBQ7zdkJPCwCaxoqvO1kdP0AtbkHCQQ",
	"VU6XTGvrudt86WpRJOEAUQX3hhmdNcd6x/kdGGJeOsKhguV1t2I8sk+CzfAdt94FDXS4p0AhRD5AedRB",
	"RhSCQYZ/Ugiz68w5EXs3Uk9JDSAd00ZTXnX731ENNOMKyN9FSVLK8cVVaqhEGiFRTkD50cxgJLBqTmfi",
	"rzEEOSzBPiTxy/377YXfv+/2nCkyg3PveW8attFx/z6qcd4JpRuH6wpUhea4HUauD9T8473nnBdaPGW7",
	"idmNPGQn37UGr8wF5kwp5QjXLP/SDKB1MldD1h7SyDDzOo47SKkfDB1bN+77EVuWOdVXYb7YKI9W7wm2",
	"XELGqIZ8TQoJKVjvaiNgKQuLAY1Yv6t0Qfkc5Wopyrlz/LHjIGMsldVgyJJ3hogKH3rFk7kUZRFjlM7Z",
	"0zvYG7EDqHn5BIjEzlbOP6fVfC6mYsgN5hEe7M73Zsw+q8J41PswNEg9qx+GFjnNKIE4FjDsIVFlmgJE",
	"XYBjT65qqa1oyDq+xQ1oxIZSWh8oQlNd0rxBdeNYMERI4Q1JLdixGhXtJQy0F+DmGimmu6Mh4ZhjYcjv",
	"8+je66FjUHYnDpyl6o99/lLm3Zyvr0B8sQMRCYUEhZdNqG9S9quYhTFL7jZSa6Vh2VXJ266/9TCI970P",
	"P8FzxiFZCg7raJgu4/AGP0YPPF54PZ1R9Ojr235NNOBvgdWcZwg1Xha/uNsBD3lXOQpewea3x21ZY8Jo",
	"LdQ2Ql4QStKcoS5ScKVlmeoTTlHbERy2iEOFf9f1679e+iZxhVtEH+aGOuEUnWkqHUjUCDyDyIP/OwCv",
	"BlPlfA6qxffIDOCEu1aMk5IzjXMtzX4ldsMKkOjVMLEtl3RNZjRHdd0fIAWZlrrJSzFiRGmW5840ZKYh",
	"YnbCqSY5mLfwG8aPVzicN616muGgz4U8rbAQZ/1z4KCYSuKOH9/br+iT55a/cP55GOFrP1tjghm/DitZ",
	"ozKkjlr9v3f/a//Xg+QfNPnjQfL8P/Y+fHzy6d79zo+PPn3zzf9r/vT40zf3/uvfYzvlYY/FMzjID1+5",
	"R9bhK5Ska2tCB/Zr0yQvGU+iRBbazFu0Re5i7J4joHtNPYtewAnXK24I6YzmLDOi0kXIoc3iOmfRno4W",
	"1TQ2oqVX8WvdUT69BJchESbTYo0Xvsa7vlLxyCE0b7lgIDwvs5LbrfQCqnWM9z4rYjauosNs4oh9gqFD",
	"C+odrtyfj54+G43rkJ/q+2g8cl8/RCiZZauoVAer2LPDHRA8GHcUKehaQY/giLBH3XOsl0A47BLMe1Ut",
	"WHH9nEJpNo1zOO9u7NQXK37IrR+wOT9oLFs7HbyYXT/cWhr5udCLWEB5Q1LAVvVuArQcGAopzoCPCZvA",
	"pK0+yMyTyjkK5UBnGNiMDzQxJHyiOgeW0DxVBFgPFzLojR6jHxRuHbf+NB65y19duTzuBo7B1Z6zsoz5",
	"v7Ugd77/9pjsOYap7tgYQzt0EBUWeW26wIeGa4vhZjaNhg2yPOEn/BXMGGfm+/4Jz6ime1OqWKr2SgXy",
	"Bc0pT2EyF2Tfx1K8opqe8I6k1ZvpJohiIUU5zVlKTkOJuCZPm72gO8LJya80n4uTkw8dK39XfnVTRfmL",
	"nSA5Z3ohSp242OtEwjmVMSuKqmJvcWSbXGHTrGPixras2MV2u/HjPI8WhWrH4HWXXxS5WX5AhspFmJkt",
	"I0oL6WURI6BYaHB/3wp3MUh67lUPpQJFfl/S4lfG9QeSnJQPHjwG0ghK+91d+YYm1wUMVkD0xgi29Q64",
	"cPuugZWWNCnoPGatOTn5VQMtcPdRXl7iIzvPCXZrBMN5Z18cql6Ax0f/Blg4dg7swcUd2V4+z058CfgJ",
	"txDbGHGjNiFfdL+C8LgLb1crxK6zS6VeJOZsR1elDIn7nanSb8yNkOXt+orN0XfSZSqZAkkXkJ66FBKw",
	"LPR63OjuXUecoOlZB1M2uYgNbsHwdtR1T4GURUadKE75uh1nrEBr77z5Hk5hfSzq6PhdAoubca6q76Ai",
	"pQbSpSHW8Ni6Mdqb7/yTUK9VFD5cFOOGPFnsV3Th+/QfZCvyXsEhjhFFIw6zDxFURhBhib8HBRdYqBnv",
	"UqQfW555ZUztzRdJNOJ5P3FN6seTcyUKV4OKaft9CZipSJwrMqVGbhcuyY6N5Qy4WKnoHHok5NDcMDBi",
	"smGiwEG23XvRm07M2hda576JgmwbJ2bNUUoB88WQCj5mWg5kfiZr0XLKe8yd5xA2zVFMqjztLNOhsmH2",
	"scnA+kCLEzBIXgscHowmRkLJZkGVz/+DaZL8WR4kA3zG2ORNGSlCRXyQC6nKN+F5bvucdl6XLi+FT0bh",
	"M1CET8sB2SSMhI/u1rHtEBwFoAxymNuF28aeUOo46XqDDBw/zWY540CSmBsVVUqkzCZwqq8ZNwcY+fg+",
	"IVYFTAaPECPjAGy01OLA5K0Izyaf7wIkd3He1I+NNt7gb4iHpFjHYiPyiMKwcNZj+Ek9B6DO9666v1oe",
	"oDgMYXxMDJs7o7lhc+7FVw/SSYyAYmsrDYLzFbjXJ85u0MDbi2WnNdmr6CKrCWUmD3RcoNsA8VSsEhuT",
	"FpV4p6upofeorzVGyMUOpk1BcUeRqVih/wleLda3dwss/XB4MIIX/ooppFfs13ebW2A2TbtZmopRoUKS",
	"ceq8ilz6xIkhU/dIMH3kcjfIKnEhAFrKjjpFq3v8bn2kNsWT7mVe32rjOluSD2OJHf++IxTdpR78dbUw",
	"VR6Id22JJaqnaLpRNFNgBCJkjOgNm+gaabqmIAU54KMgaQhRyWnMdGfeNoA3zpHvFigvMNEG5et7gW+O",
	"hDlTGmoluncluAn1JMX8XkLM+lenCzkz63svRHVN2QQy2LGxzGtfAfq2zphUOkELRHQJptF3Ch/V35mm",
	"cVmp6f1js2GyLM4bcNpTWCcZy8s4vbp5f3xlpn1bsURVTpHfMm59OqaYvTXqE7hhaus2unHBr+2CX9Mr",
	"W++w02CamomlIZfmHF/JuWhx3k3sIEKAMeLo7lovSjcwyCCUs8sdA7nJHk4M5Zxs0r52DlPmx97qNuID",
	"SvvuKDtSdC2BwmDjKhiaiYxYwnSQ/LQbY9lzBmhRsGzV0oXaUXtfzHQnhYdPGdXCAu6uG2wLBgK9ZyzM",
	"Q4JqZgerBXybxraRnGMyCDPHzRxeIUMIp2LKJ2HvIqoKA9uGq2Og+Y+w/sW0xeWMPo1Hl1OdxnDtRtyC",
	"63fV9kbxjKZ5q0prWEJ2RDktCinOaJ44BXMfaUpx5kgTm3t99DWzurga8/jbg9fvHPifxqM0ByqTSlTo",
	"XRW2K76aVdlEZD0HxCd5Nm8+L7NbUTLY/Cp7UqiUPl+Ay5YbSKOdtH61wSE4ik5JPYt7CG1VOTvbiF3i",
	"BhsJFJWJpFbfWQtJ0ypCzyjLvd7MQ9vjzYOLG5YbMsoVwgEubV0JjGTJlbKbzumOn46aurbwpHCuDfl8",
	"lzZltSKCt03o6Ba8LpzVfUkxKZ/VinSZEy+XqElIVM7SuI6VT5UhDm5tZ6YxwcY9wqgZsWQ9plhesmAs",
	"00wNeOi2gAzmiCLTJ3jsw91UuHIkJWf/KoGwDLg2nySeytZBxSyITtvevU6N7NCdyw1sNfT18JeRMcKE",
	"lO0bD4HYLGCElroOuK+qJ7NfaKWRQjfp2iSxg8E/nLFzJW4w1jv6cNRsnRcXTYtbWD2ky/8MYdg00ttL",
	"l/jHq8uM2TNHtBQJU8lMij8g/s7D53EkhMan4GTo5fIHDPE5r7U7dUWVevbe7e6TbkItVNNJoYfqcecD",
	"sxzmAvQaasrtVtvKAA1ftzjBhF6le3b8mmAczB1P3JyeT2ksUaIRMgxMB7UBuKFL14L4zh73qgpIsLOT",
	"wJZctWU2OroAWUe3dTOtXFBgsNMOFhVqyQCpNpQJxtb+lysRGabk55TbAhOmnz1KrrcCq/wyvc6FxNwG",
	"Kq72zyBlS5rHJYcs7ap4MzZntnZCqSBIzu8GsnVpLBW5AgdVmI1DzeGMPBgHFULcbmTsjCk2zQFbPLQt",
	"plQhJ68UUVUXszzgeqGw+aMBzRclzyRkeqEsYpUglVCHz5vKeDUFfQ7AyQNs9/A5uYtmO8XO4J7Boruf",
	"R/sPn6PS1f7xIHYBuNoXm7hJhuzkfxw7idMx2i3tGIZxu1En0TBwW/yqn3FtOE2265CzhC0dr9t+lpaU",
	"0znEPUWWW2CyfXE3UZHWwgvPbOUWpaVYE6bj84Omhj/1eJ8b9mfBIKlYLpleOuOOEktDT3XmfTupH86W",
	"gXFJUz1c/iPaSAtvImo9Iq9XaWrvt9iq0ZL9li6hidYxoTahRc5q7wWfypkc+nw5mEW2Sh5rcWPmMktH",
	"MQedGWakkIxrfFiUepb8jaQLKmlq2N+kD9xk+uxJJHNuM4Mj3w3wa8e7BAXyLI562UP2XoZwfcldLniy",
	"NBwlu1dHewSnsteYGzfb9dkONw89VCgzoyS95FY2yI0GnPpShMc3DHhJUqzWsxM97ryya6fMUsbJg5Zm",
	"h35+/9pJGUshY0nw6uPuJA4JWjI4Q9+9+CaZMS+5FzIftAuXgf5mLQ9e5AzEMn+WYw+BFyLyOvXZnCtN",
	"uvNVj2gH+o6p+WDIYOqGGpNm5tzrN/p55XPX+GS+eFjxjzawN7yliGS/gp5NDLJ6R7czq74H9m9KXojV",
	"0E1tnRC/sV8AaqIoKVme/VJHZbaSpkvK00XUnjU1HX+ryztVi7P3UzTX3IJyDnl0OCsL/uZlxohU+08x",
	"dJ4l4wPbtvO42+W2FlcD3gTTA+UnNOhlOjcThFhtBrxVDtX5XGQE56kTm9Xcs5v/P8jS/K8SlI4FD+EH",
	"69SFekvz3rVJggnwDF+LE/K9reC6ANJIW4OvtCr636WstQr1ssgFzcaYgOH424PXxM5q+9giJTZJ8Rwf",
	"Kc1VtPRVQc7GYe7Bvt5IPHRh+DibfanNqpXGLFJK02URCw41LY59A4xADXX4+HwJsTMhr4JajDaO1Axh",
	"6GHG5NK8uKrRrOyCNGH+ozVNF/gka7DUfpIfnl3bU6UKKtpVlWmqRIZ47gzcLsG2za89JsK8m8+ZsoU7",
	"4Qya8ahVcLZTCfj41ObyZMm5pZSo7LEpecBF0O6Bs44aXs0fhayF+B0Fcpucftdk40fYK5pYqZ25vFPK",
	"zkY3VhVHfEHmlHLBWYppjWJXs6vwOcQGNiADVFvJ6o+4O6GRwxXNl165yTks9mZQ94zQIa6rhA++mk21",
	"1GH/1FhKckE1mYNWjrNBNvZp/50ekHEFLjEl1oMN+KSQDbsicsioqTqpTBo7khGGxfQ87L4z3966Zz/6",
	"i58yjgK+Q5tzTbeaOixAqM2rgGkyF6DcepqxwepX02eCYbIZrD5MfMFCHMOa5cyyrQ26O9SBt0g7C7Bp",
	"+9K0dfl9qp8bHsh20oOicJP2F4WIygN6xXsRHLEsJt60EyC3Gj8cbQO5bXQlwfvUEBqcoSEaCryHO4RR",
	"FUhoFd8xQqulKGxBrAtXNIMB4xEwXjMOdTnNyAWRRq8E3Bg8rz39VCqptiLgIJ52DDRH63OMoSntTA+X",
	"HaqdS8igBNfo5+jfxrq2Qw/jqBrUghvl66qKp6HuQJh4ieWDHSK7lRpQqnJCVIYRBa3aDTHGYRi3rw7T",
	"vAC6x6ArE9nuWlJ7cna5ifqCRKdlNged0CyLZZJ6gV8JfvVJoWAFaVkllCwKkmJOlGaSmC61uYlSwVW5",
	"3DCXb3DJ6YJiKBFqCAuy+B3GIJTpGv+NZVPs3xnnhLGzG6D3uHDVI3aUm5sjdaReQ9OJYvNkOCbwTrk8",
	"OuqpL0bodf8rpfRczJuAXHNqiE1cLtyjGH/71lwcYeaETopQe7VUiQ3Q6U74Enb4bKxCcptcCa+yTs5Q",
	"NPZUJbI2KyD6i12N8fLrcb0NEmJQe79a62GfA27a6y9OtYtc05RsZEG90UDWe8fG/SAUcc1pn8eOddgx",
	"nzu9h0mGHTkbx96IUO8K1gXoR+9nSgrKnGm8ZhZdzDqP9H514aZDV29wexHOz7tXY/fjWZ9PNlGMz3Mg",
	"+L1dHugUXDh7VR/ertV7Jfknof3VlWe141Ve8dH1d70TcKqbVYP2Km2PXSp6u0z3Jv/xF+vDRoBruf4C",
	"VLidTe8UV+pKu1Y9VTchVRrjQWmNG7divE5Sf/6jOucR0lMhFKtTZ8cKKA30dTvGGkhB/qbuWN7R5AxS",
	"jfnSawO6BNglm5OZLCjOd5sHqeftWLkEuvRHm3IedZOkb7nQOmFJQWidTTA9GZ7h56Byk0KmhJlr58Bd",
	"fbxmwMFgt+fZDFLNzraEgf3PAngQYjT2Sghb5zaICmOVGy1mEdldxVYDtClKayM8QTa/S4PTFwRyCus7",
	"ijSoIZrxeuzvlYskkEAMIHdIDIkIFXNDsFpTZxlmqqIMxIJ3+7HdoU7F1VsrJwhqvOBcniTNjVsHOm6Y",
	"Ml6sY9BcputO4b/oEdoXKdZN9t8vbL/C2gqqqmPnE1CET1Jy2E3Td+4SWGDQXmUo8KksQPnffISunSVn",
	"pxBW80GzzDmVmW8R1TN4FUay4T7qhHf5RPVtoGfVzKx20uwG9EQSP6ErbpoLI38lff7MTb/IsOg9en/Y",
	"VN3o8WngmoF0Vc9Q2MuFgkQL79S5CY5NqHAF2i+CBNWbbNEC15sC5X2d4wWTzlJMeUKdZ0u4QCJhSQ10",
	"MsjE0j/nJmS/tN99BItPOrpVnVLR6/YE8d49l6kOEkOqnxF3W26PjLmIZoVxbmusqlhaFm5QGar+Cymy",
	"MrUXdHgwKu3T4KRHG1hJVCmRdlfZeV/mmALsdRBneArrPSv6+xT7fitD6K0IZdcQxPW3dvtKlU7x93U+",
	"twuYXwmcN6m4GY8KIfKkR9d/2M0u0z4Dpyw9hYyYu8M7tvWUGyF3UcVcGXPPF2ufTaUogEN2b0LIAbeu",
	"xN6u20xv3Jqc39Gb5l/hrFlpEz45ndLkhMd9MjEVk7wkf/PDbOZqCgzzu+RUdpAtuUtWPZltJD2PFN+Z",
	"DH2Udi2t7YIoNVFZKGJSypbSExErsq+J4Ctj+IgVLZYs7VZR6IgSM6wildDI4IcVAx83avyxVsENn2PI",
	"lmlIqRXgzOOBsryUEFEthxvSOnyuU3/9/jhY0dNoIbJLJFuOWk/18cTiVQ3FvYHojGUlbVgw1CVqjwws",
	"Zh7COpC0dqaq+OI6NIV1RPg8qbKgxTSALg7Db6HhbHUtk5ZkwRRxY9aZ1XqKL1ZYuMwt3ovaOGYvln1i",
	"ED10lcGRIxPUK9mssgiT09Rer9LaFPCJ409de0vf1KdxWOUU32ELeKEmK6id4kUIB84Nu6a+qZASLKWX",
	"EhrL36Yccwus2VewRQpjmcwybaow69bU3JdA86leVgrFvkJEbb0jZqIRHLNzdfWVCm1MmOQ7JBzDu+UZ",
	"za9f54gpig4QH66wa3yhodIqRLJFpbqYf9hrOmjuQEF1dVPzd6gj/R8wexQ1DrqhnLGgqlnjTSrIMmlO",
	"clGXdMMhyTmOaa2JD5+RqYttKSSkTLFW2N+5zz9c6WgwHX9d73ezUmjbOn8R+hJk7F71oiBv61ymWuCN",
	"UUNYH9EbZio9JzdK5THq65BFBH8xHhUmmdhyXZw2zIw2N3TLf05IuGJzY+A4tKO5sZs+Y+jyrEnNXDql",
	"gu46B9/WDdxGLup6bUNt5V3kbkp4OcTEHc9ja7qjjd0iBJNAEwSV/P7wdyJhhlVeBLl/Hye4f3/smv7+",
	"qPnZHOf79+N1ha/Lum5x5MZw88Yo5pc+f2vrU9zj2t/aj5Ll2TbCaARq1HWSMBThNxeqdSOVmn6zRpDu",
	"UXXVMnbx62lvAiImstbG5MFUQQjGgOgL1y0Sa4HqhLSUTK8xg4zXmbPfon4A31dmNmemrXIOuLtPi1Oo",
	"chDVRrlS+dv1e0FzvI+MTI1eVRpryX67ossiB3dQvrkz/U94/Lcn2YPHD/9z+rcHTx+k8OTp8wcP6PMn",
	"9OHzxw/h0d+ePnkAD2fPnk8fZY+ePJo+efTk2dPn6eMnD6dPnj3/zzuGDxmQLaAjH688+l8sZ5YcvDtM",
	"jg2wNU5owaoS0oaMfU0WmuJJhCVl+Wjf//R//AmbpGJZD+9/HblwyNFC60Lt7+2dn59Pwi57c9TCJ1qU",
	"6WLPz9Mt3fvusAppsU9L3FEbrWBIATfVkcIBfnv/7dExOXh3OAlKTO6PHkweTB5iBcICOC3YaH/0GH/C",
	"07PAfd9zxDba//hpPNpbAM3RaG3+WIKWLPWf1Dmdz0FOXHEa89PZoz0vSux9dBaIT2bUeSy3jg3OCSIy",
	"ujVbnDUTPRxt8E0jB7pyKbnHVWZ8p7XgGcZMWKW+YW0Vsg6zOgXsYc2ofCIcmxlw/9dIyb4Zm5t3dKOE",
	"aKs4qXl5//fRT2+JkMQ9ad7R9LTyNyGHM5vUQIozhq74WRC/YXpOPM3+qwS5rmnKcbsw651PdO4CHJZq",
	"XjS9gWtJKlZBO1YfB2c2pBAQc2UvrJmVliWEkNSs17DTB8nzDx+f/u3TaAAgaLxWgDkRfqd5/js5Z1hm",
	"BS2APquQyxoxjiT1Rgl6XNufsEO9k2N0Z66+hnVbqjbNIJrfueDwe982OMCi+0Dz3DQUHGJ78AGj9pFY",
	"8Jw9evDgygo+VXFj1im6GsWTxAUG6jIh+ylSw9XXfeop4PrkChfa9Pq89HLbw3UW/YJmWEsDlLZLefjV",
	"LuWQo/+IuRSIvfQ+jUdPv+K9OeSG59CcYMsgJU73ovmZn3Jxzn1LI/CUyyWVaxRngoI/rZhUOldoikAW",
	"ac92o8TH6MOn3ltvL6xgsPex4YKQXepO7BRvOXy15Zq8o/o4ZzehZKtAgvle5b9HI7WrAoEZ+dW9Cfk+",
	"7I3cG/Mz2OwHpeR1vX9/61UJp3waqxq2OypMXRG9tAMV8e39fdP390FTwdFIWhgDpnEKNsLUcWO67AXa",
	"DT1qlcC7UIm5oFTBBRI+f9Y6PK33pZ3pQ+z5t5VR3+KuB3d9YlIAbyUxNUtMfH7W7F39q5ukcWV8Rsb9",
	"lQt9b2hu6CRYbisM2mbyvBUG/zLCYOXZaivZ+uTVlxMPsYzN3kefnfUKREKXnXaAMBg+q4O+QfbQuy12",
	"cm9iU62GbS7GM5wr61YxD3Pm3gp4X4CA181HHQOjzjJ8c0IdwrCoE1bvUoa2UV9qp8TaX6kU9xdGVq/Y",
	"ZiDdLrBdgH12hDHHrD8bW/1TCmEOabfi119a/KoCTC4lgDUyyruQpcCMdSntXVs7x3QliTWDjALOVtXv",
	"dUd4XFe/MSwGExL5XBRq7F+GaEK1j0a7WePOu7ErYn0P4QP1xfrw1Tbp6ivS8wxOjBe5BeJ787l5adTs",
	"8P56zA7DeNOTB0+uD4JwF94KTb7DW/wzc8jPytLiZLUrC9vEkfamNmXvJq7EW2wJGUWdijfgUVjxIEz3",
	"az0y7ro6k2EKhXsT4hMDq6rMgQvcnwua1wmKqJzbTobHGSSQO/7PfRz/zoR8hxEBWo3RsUy7HPjkDuN6",
	"/+Gjx09cE0nPrd9Wu9302ZP9g2++cc3qNND2fdNprrTcX0CeC9fB3Q3dcc2H/f/9+z8mk8mdrexUrF6s",
	"39qca18KTx3H4gmqje/bra98k2KvdJcLbyvqrsVs/0KsotxfrG5vnxu7fQz2/xS3zrRJRu4BWmkwG4Hq",
	"V3gL2WOyyz009mmVDd+pLpMJeStczpAyp5IImYF0dWHmJZWUa4Bs4ikVo9aUzZGQ5gy4Ng9GrHQhE8Uy",
	"sKHW81JCRnK2xFKwEs7QHx6nx7d8A4LtjB69Zr9YJv+GrsIa/tU1rYVbMqo7l3Tla+1gNQkh8advviEP",
	"xvWrJc/NAEmFmBhzXdLV6Bq1fRWxDfI1b6bD3+qMi2MP0RzV0o8ta0abubf/2pz7q5XYLbm7jb0izrmz",
	"wac26IT6A5eZY6PmwAp2thIPloZZ1+G8RsrzIlScxZkZhioFvmDbwFaVdPTx2Ubv7SG+ffxfipW0CWpH",
	"toERpmrvI9oyQp7RObcYIffXMpMGNiMplt5oJMgMdLpwwbkt1EfYk0/G38+bNpVivGqpBnexmws6TIyI",
	"JQIHZtoI4ibRcAcyQsQ/+by45jObYY6IqtCCrziKJinmi3BV9bdclUKmvB+/j+E1u7gTlC/rybsCGaLl",
	"KuyetwjeDcEd5vitL/aEGHOL+DN4+vunZELeijpE3NUZ+DOaHD/nzf65F/RWcLC2dSP5Wlq8NaNWYgeq",
	"8BEpPjeIfb9UGZ8vLILs+bJlG+WQH2zRsI2yyJDb20z2VV7hP0QLAjduGbO2ydbEB/VoQ5izaWiTMzfT",
	"Mt/gK+ZG+OkX+LS5CY51PSwGD6nnM04s4FfLdDDdjiXmvSojbx8Hiic5H8yNtKjcz6J5yaeQCz5XXyYr",
	"2kQdcbxEqKRK/x7P8f7XO7svMZOPefJaz0eX20kxnoIty+crs7vEaxbCv10fhJotfRJLHsas3jB3efrg",
	"8fVNfwTyjKVAjmFZCEkly9fkZ16VULwMt8MM9lWuNa8NjhYtQGtTMwdYGiYsujgTbLisfdQrln3azgyD",
	"jH078kHGAz4Y5hekRQFUXpwBbjddHbdmPHwVegU3EqtX2bMioBgU7egY/x+jgXonDHcXM3f5ldwC6jN9",
	"OTbhXHbFbFw5xxgpQMz2yQm/T9SCPn346LdHT5/5Px89fdajOTPzuAQ9Xd1ZPZD5bIcZokD7qtWBVyu1",
	"V/jdv+7d3m0TxyOWraKJlutiKp10s04su6NIQde9+dmLLcVgwmHrwjDXn9hQaTZdRN9X/vlTlYs95C+q",
	"V7DNvudqqNwWgekJmgj4jCG0uhpMhfXNhWE2SJMtsqwqcFz347QOLrAXnUeebN05Nyro6pt6pCb4RgXu",
	"BZsmWm5OpsRk4OPA3F0V4EbflbIohNTV6VaTQeIe9JntGtJeH+HuJMylVKeLstj7iP/BbF6f6oADW/Iy",
	"sPO5321x+j1rxd8k5x3ZFpe8E1sCtfUdkE3m5BPLOc8CMSNvWCrFAeaYd9eNWisNy072P9f1t01lz6NX",
	"k+A545AsBY/lpPsJv77Bj9Es9kLTvK/zsfnY17fFHJvwt8BqzjOEM14Wv1/IU/xSKqTWaiWYY1wXBrP0",
	"v+NR84dmzdPuSVrztHvMGtXJen7e+9j40/nwuJZqUepMnAd98QFoedEQ832QK3u43rx6E7VyTiuSgTJE",
	"+/UpqQI8xE5M9TWSiSzIiN6bjOwvqraaMZ61iAQlylScgVSVQkN6d5tb3dWfR3c1eN934rE28+Y2jlaq",
	"q5VI3ooM7LjNZLexcFEuMnAJQruCSCWDxd/7/laq27VeYCkt5wtNyoJoEXvr1R0Tmloma+sXqm0F32wr",
	"X23lDAjNJdBsTaYAnIipWXSzcCahCl3l/YPRSZrxumU1XIUUKSgFWeLDY7eBVqVdxeel3oAnBBwBrmYh",
	"SpAZlZcG9vRsK5xVqnJF7v74i7p3A/BaUXAzYq2DbgS9lROQk/a6UA+bfhPBtScPyY5KIF40QP2WWBY5",
	"OA1XBIU74aR3/9oQdXbx8mhBFRD7zBTvJ7kcAVWgfmZ6vyy0ZZGY+ztSWdF+PWZLlMQ45UJBKnim+uuf",
	"bmPLWC4kWIsyKwg4YYwT48A9D87XVOn3ztgRlokLypKYKTYUbO1LiW9G/qVKiN8ZOzX3IVelqrLmOwVG",
	"vLIWh9WGud7CqpoLrU1+7EpDogUpFWwbuQ9LwfgOWSqswKoDMxEWDekuDnOaUKeg6KKyAUSNiE2AHPlW",
	"jVprtQmjBxCmakRXZRWblBOUx1JaFAWWe0tKXvXrQ9ORbX2gf67bdonLFS7CezsToELtlYP83GJWYdDG",
	"giri4CBLeuoUXHOX8ylS0ostIUHDdLKJ8s2xPDKtwiOw9ZCWxVzSDCtz0ogq5Wf7mdjPmwbAHffkiWWP",
	"kynMokVIzKbXlCx7VUTV0ALHUzHhEaskK5KaIzjDqjieQFzvLSNn0FOi+TgoG+ma41zRLfLj4bLtVveo",
	"pcwYZsctOSDEjqEPgbcHDdXIF8cEdk5q7UF7ir+DchNUYsTuk6xB9S2hHn+nBbS1eeH91bgoWty9xYCj",
	"XLOXi21hI30nNqY//CqD+tpm28/ok9bUnwbvv8lF3rZ755TpZCakKzxPZxpkRJXXKmlAmfYxg9aAooXz",
	"mCA4grs23TiugHmdeMMxEQsC8VU62TKSx8dM9Z2QgwJ/mu5tlGlScs3yIPi5eil/efrCWx3ArQ7gVgdw",
	"qwO41QHc6gBudQC3OoBbHcCtDuBWB3CrA/jL6gBuKpIv8QKH92/mgicc5lSzM6hC/G6TD/2pIl+qq8rr",
	"JFCLcU6Zdqk8CfViAH65XOCfBpojDliOPLYQqjdHEhZ+VqKUKZDUQMg4KXJqngaw0lViuWbKUp9E2ZV+",
	"xiyoVMHjR+TohwPvoL9wjuTNtncPXDJypdc53HOpG6rarD6HA3CDdJfCgforwSegc+n4WA5EGfR+i61f",
	"wRnkogBpfX+JlmVE43MMNH/pcLNF4dMorWlG+33c0DM5tC1pEZS4x7VSRaiN2mhWxpzRXPWXxrTjLWkR",
	"ywFXXXxWFYTc5IXI1q0TYnZtDzeweTZqN33GqVxHQnQ6J6JDGloYfuUIq6vL+nTlwSRdou2S2TYKi0nr",
	"ElT0HG+i8mgURbVhnaFssM+sRSfR0tHt0IFRBeAQB1hDz35PyHvb72ZD1REid8RqZv7F+A02W1ZMA9ua",
	"R4RjPV9rXLlHfPT04tkfG8LOyhQI04r4eJTt18t4tErMSHPgiWNAyVRk66TBvkaNWyhjiioFy+n2myjk",
	"ny7rsbt8zJfN99TNXCOvgsVt4skh0awSx4B7uPNaw2DeXGELR3TsOcD452bRfWw0BIE4/hRTKrVrzezI",
	"9Opp1reM75bxBaexJREw7uL32kxk8hkZn1zLkvfzvG9XkJYGuPAk30XtPJrkYKUbds0MpuV8jtmbOzY6",
	"szTA8ZjgN8QK7XKHcsHdKMgOXmX0vGwSqfZwXe4SxKrdFZLMpSiLe7ZMFV+jMWNZUL72Jl9IFFuWucWh",
	"TXx3tYzWhth1HQHQHOt0f31a7Xde5Rfobt1V2/zdooWcU0Xs/kJGSp65yKFOIO6KD88cbYc+XvGaTW/M",
	"HW3XG1mdm3fIFeF32YW4VGbuAmSiV9weqGZ6dxvwa0/u5DZr7V/j2nhnMy70MNhu8GrNEK7o9pABX8Pr",
	"I0hRUofCNWtt2UqAfYEjYb4S2/JKnUc6wzd9SII6fNZGCnlBqC8pkAqutCxTfcIp2miChU26/iVeG93P",
	"3176JnEzYcSK54Y64RQzzleWmyifm0HETPEdgGejqpzPQRleGRLJDOCEu1aMk5Kbl5aYkSVLpUhsGKo5",
	"Q0Y+mdiWS7omM5qjkfEPkIJMzc0e7LpVGCvN8tw5tJhpiJidcKpJDlRp8oYZLmuG87nEKk8u0OdCnlZY",
	"iKevmAMHxVQSV758b79ihgi3fK/kQ4Wl/VxHdl9vaggPO8t6IT98ZeCmmAwnZ0rXPhAd2K/N/r1kPIkS",
	"2fECiHMJa9MWuYu5YhwB3Wtah/QCTri54bQgyNWpvhg5tM08nbNoT0eLahob0bIG+bUOeuJdCZchESZz",
	"a1r5EwVmBnTgzZe48ViLpr33O5pRNpa3jH11GcV6GrlHAvjP9hThHW+WBWkpmV6jHYIW7LdTMP//8OmD",
	"+SbPvImilPlof7TQutjf28O6lQuh9N7o0zj8plofP1Qr/+itDYVkZ5jG+sOn/x8AAP//2hgBg7g7AQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
