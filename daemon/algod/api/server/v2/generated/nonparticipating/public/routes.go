// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Returns the timestamp offset if devmode API is enabled.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
