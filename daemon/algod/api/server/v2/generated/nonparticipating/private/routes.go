// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"n6i83tTbD7f/LwAA//8/2904d9oAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
