// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
