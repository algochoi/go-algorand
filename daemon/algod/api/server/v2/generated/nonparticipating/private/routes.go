// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
