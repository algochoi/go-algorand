// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/xMAAP//avdElIO8AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
