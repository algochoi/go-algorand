// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"BwAA//+MNnJrAsgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
