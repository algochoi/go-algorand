// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
