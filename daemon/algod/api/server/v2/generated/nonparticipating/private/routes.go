// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"JwAA///5BuHljbwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
