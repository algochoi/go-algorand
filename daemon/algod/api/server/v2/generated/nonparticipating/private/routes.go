// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"CwAA//8l5fDjWdoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
