// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/wIAAP//RSwGSnDNAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
