// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
