// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vwAAAP//a1yx73vZAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
