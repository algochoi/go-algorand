// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
