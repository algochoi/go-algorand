// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
