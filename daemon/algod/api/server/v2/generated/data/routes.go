// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"T4mD+ULMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
