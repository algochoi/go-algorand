// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
