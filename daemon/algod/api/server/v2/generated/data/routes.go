// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
