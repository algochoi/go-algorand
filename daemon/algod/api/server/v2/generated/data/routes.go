// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"fwAAAP//rixmG/fIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
