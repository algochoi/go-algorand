// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XdkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
