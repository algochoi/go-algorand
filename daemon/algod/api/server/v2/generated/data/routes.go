// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. WARNING: This endpoint is experimental and under active development. There are no guarantees in terms of functionality or future support.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
