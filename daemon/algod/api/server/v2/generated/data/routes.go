// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"jXnB3n34fwEAAP//3kEf9pfZAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
