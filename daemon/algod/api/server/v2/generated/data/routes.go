// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"frr9/wEAAP//YNL/BFHLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
