// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
