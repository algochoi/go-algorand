// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//6cQsNiZ0AAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
