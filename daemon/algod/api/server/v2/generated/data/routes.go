// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
