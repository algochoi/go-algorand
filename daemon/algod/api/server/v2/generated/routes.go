// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
	// Simulates a raw transaction as it would be evaluated on the network.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"format":  true,
		"exclude": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------
	if paramValue := ctx.QueryParam("exclude"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"name":   true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument name is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":   true,
		"hashtype": true,
		"format":   true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------
	if paramValue := ctx.QueryParam("hashtype"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":    true,
		"sourcemap": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------
	if paramValue := ctx.QueryParam("sourcemap"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET("/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET("/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET("/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.GET("/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET("/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET("/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET("/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET("/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET("/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET("/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET("/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET("/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET("/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET("/v2/status", wrapper.GetStatus, m...)
	router.GET("/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST("/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST("/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST("/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.POST("/v2/transactions", wrapper.RawTransaction, m...)
	router.GET("/v2/transactions/params", wrapper.TransactionParams, m...)
	router.GET("/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET("/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)
	router.POST("/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ANIqTgEA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
